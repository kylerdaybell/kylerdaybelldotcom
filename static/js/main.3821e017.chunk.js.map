{"version":3,"sources":["public/images/NodeLogo.png","public/images/MySQLLogo.png","public/images/ExpressLogo.png","public/images/ReactLogo.png","public/images/JestLogo.png","public/images/Buildingnumber2.jpg","public/images/logo.png","public/images/Group.jpg","public/images/Single-Line-Logo.png","components/about.jsx","components/home.jsx","components/examples.jsx","components/projects.jsx","components/code-examples/jest.jsx","components/code-examples/mysql.jsx","components/code-examples/nodecontroller.jsx","components/code-examples/nodeservices.jsx","components/code-examples/express.jsx","components/code-examples/nodemysql.jsx","components/code-examples/react.jsx","components/navbar.jsx","components/notfound.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","AboutPage","Component","className","href","download","ExamplesPage","to","src","nodelogo","expressslogo","reactlogo","jestlogo","mysqllogo","ProjectsPage","building2","JestExample","MysqlExample","NodeControllerExample","class","NodeServiceExample","ExpressExample","NodeMysqlExample","ReactExample","Navbar","Notfound","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3821e017.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NodeLogo.74f3cbcd.png\";","module.exports = __webpack_public_path__ + \"static/media/MySQLLogo.af25e683.png\";","module.exports = __webpack_public_path__ + \"static/media/ExpressLogo.fe9713b4.png\";","module.exports = __webpack_public_path__ + \"static/media/ReactLogo.47ce6e77.png\";","module.exports = __webpack_public_path__ + \"static/media/JestLogo.450c112d.png\";","module.exports = __webpack_public_path__ + \"static/media/Buildingnumber2.cb9260b5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.665e1249.png\";","module.exports = __webpack_public_path__ + \"static/media/Group.2184ecc0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Single-Line-Logo.9a490b45.png\";","import React, { Component } from 'react';\nimport '../public/css/aboutpage.css'\n\n\nclass AboutPage extends Component {\n    render() {\n        return (\n            <>\n                <div className=\"section1 header\">\n                    <h1 className=\"header\">Hi I'm <span className=\"green\">Kyler Daybell</span>.</h1>\n                    <div className=\"roboto-text-thin header-padding\">\n                        <p className=\"roboto-text-thin header-padding\">\n                            I love working with <span className=\"green\">code</span> and building amazing new things.\n                        </p>\n                        <p className=\"roboto-text-thin header-padding\">\n                            I am a <span className=\"green\">full stack developer</span> with an emphasis on <span className=\"green\">back\n                                end</span> and <span className=\"green\">API's.</span>\n                        </p>\n                        <p className=\"roboto-text-thin header-padding\">\n                            Most of my experience has been with <span className=\"green\">Node.js</span> and <span\n                                className=\"green\">JavaScript.</span>\n                        </p>\n                        <p className=\"roboto-text-thin header-padding\">\n                            <span className=\"green\">Database design</span> and <span className=\"green\">Database queries</span> are my\n                            favorite things to work with.\n                        </p>\n                    </div>\n                </div>\n\n                <div className=\"section2 image-header1\">\n                    <div className=\"skills\">\n                        <h1 className=\"header header-text1\">Skills</h1>\n                        \n                        <div className=\"skillname skill1name\">\n                            <h3>Node.js</h3>\n                        </div>\n                        <div className=\"skillstars skill1stars\">\n                            <h3> \n                                &#9733; &#9733; &#9733; &#9733; &#9733;</h3>\n                        </div>\n                        <div className=\"skillname skill2name\">\n                            <h3>Express</h3>\n                        </div>\n                        <div className=\"skillstars skill2stars\">\n                            <h3>&#9733; &#9733; &#9733; &#9733; &#9734;</h3>\n                        </div>\n                        \n                        <div className=\"skillname skill3name\">\n                            <h3>RESTful APIs</h3>\n                        </div>\n                        <div className=\"skillstars skill3stars\">\n                            <h3>&#9733; &#9733; &#9733; &#9733; &#9734;</h3>\n                        </div>\n                        <div className=\"skillname skill4name\">\n                            <h3>SQL / Database Design</h3>\n                        </div>\n                        <div className=\"skillstars skill4stars\">\n                            <h3>&#9733; &#9733; &#9733; &#9733; &#9734;</h3>\n                        </div>\n                       \n                        <div className=\"skillname skill5name\">\n                            <h3>Version control (Git)</h3>\n                        </div>\n                        <div className=\"skillstars skill5stars\">\n                            <h3>&#9733; &#9733; &#9733; &#9733; &#9734;</h3>\n                        </div>\n                        <div className=\"skillname skill6name\">\n                            <h3>Typescript</h3>\n                        </div>\n                        <div className=\"skillstars skill6stars\">\n                            <h3>&#9733; &#9733; &#9733; &#9734; &#9734;</h3>\n                        </div>\n                        \n                        <div className=\"skillname skill7name\">\n                            <h3>React Native</h3>\n                        </div>\n                        <div className=\"skillstars skill7stars\">\n                            <h3>&#9733; &#9733; &#9733; &#9734; &#9734;</h3>\n                        </div>\n                        <div className=\"skillname skill8name\">\n                            <h3>Server Administration</h3>\n                        </div>\n                        <div className=\"skillstars skill8stars\">\n                            <h3>&#9733; &#9733; &#9733; &#9734; &#9734;</h3>\n                        </div>\n                        \n                        <div className=\"skillname skill7name\">\n                            <h3>PHP</h3>\n                        </div>\n                        <div className=\"skillstars skill7stars\">\n                            <h3>&#9733; &#9733; &#9733; &#9734; &#9734;</h3>\n                        </div>\n                        <div className=\"skillname skill8name\">\n                            <h3>Linux</h3>\n                        </div>\n                        <div className=\"skillstars skill8stars\">\n                            <h3>&#9733; &#9733; &#9733; &#9734; &#9734;</h3>\n                        </div>\n                        \n                        <div className=\"skillname skill7name\">\n                            <h3>React</h3>\n                        </div>\n                        <div className=\"skillstars skill7stars\">\n                            <h3>&#9733; &#9733; &#9733; &#9734; &#9734;</h3>\n                        </div>\n                        <div className=\"skillname skill8name\">\n                            <h3>Redux</h3>\n                        </div>\n                        <div className=\"skillstars skill8stars\">\n                            <h3>&#9733; &#9733; &#9733; &#9734; &#9734;</h3>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"section3 image-header2\">\n                    <div className=\"work-experience \">\n                        <h1 className=\"header \">Work Experience</h1>\n                        <div className=\"work-experience header-padding \">\n                            <h2 className=\"green \">Software Engineer and I.T. Administrator</h2>\n                            <h3 className=\"\">@ Dynamic Integrations</h3>\n                            <p className=\"small-text green \">\n                                June 2019 - Current\n                            </p>\n                            <p className=\"small-text \">\n                                &#8226; Administering I.T. for 20+ small businesses.<br/>\n                                &#8226; Working with legacy code to make systems robust and testable.<br/>\n                                &#8226; Providing technical support to customers\n                            </p>\n                            <h2 className=\"green \">Computer Science Tutor</h2>\n                                <h3 className=\"\">@ Snow College Computer Science Department</h3>\n                                <p className=\"small-text green \">\n                                    June 2019 - Current\n                                </p>\n                                <p className=\"small-text \">\n                                    &#8226; Assisting students during lab time and grading homework.<br/>\n                                    &#8226; Helping students understand the fundamental constructs of programming.\n                                </p>\n                                <h2 className=\"green \"> Captain, Training Officer</h2>\n                                <h3 className=\"\">@ Fountain Green Fire Department</h3>\n                                <p className=\"small-text green \">\n                                    Volunteer August 2016 - Current\n                                </p>\n                                <p className=\"small-text \">\n                                    &#8226; Training Volunteer firefighters to reach professional standards.<br/>\n                                    &#8226; Protecting community's from fires and other natural disasters.\n                                </p>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"section4 image-header4\">\n                    <div className=\"education \">\n                        <h1 className=\"header \">Education</h1>\n                        <div className=\"work-experience header-padding \">\n                            <h2 className=\"green \">B.S. Software Engineering</h2>\n                            <h3 className=\"\">Snow College</h3>\n                            <p className=\"small-text green \">\n                                Emphasis in web development\n                            </p>\n                            <p className=\"small-text green \">\n                                August 2018 - May 2020\n                            </p>\n                            <h2 className=\"green \">Associates of Pre-Engineering</h2>\n                            <h3 className=\"\">Snow College </h3>\n                            <p className=\"small-text green \">\n                                August 2015 - May 2018\n                            </p>\n                            <p className=\"small-text green \">\n                                Emphasis in software engineering\n                            </p>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"section5 image-header3\">\n                    <div className=\"image-header3-content\">\n                        <h1 className=\"header\"><span className=\"green\">Documents</span></h1>\n                        <center>\n                            <h1><a href=\"/PUBLIC/KylerDaybellResume.pdf\" className=\"button\" download>\n                                    Resume download\n                                </a></h1>\n                        </center>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default AboutPage;","import React, { Component } from 'react';\nimport logo from '../public/images/logo.png';\nimport group from '../public/images/Group.jpg';\nimport '../public/css/homepage.css'\n\n\nclass HomePage extends Component {\n    render() {\n        return (\n            <>\n            <div className=\"section1\">\n            <h1 className=\"header-text\">\n                <span className=\"green\"> Code </span>\n                is the coolest set of\n                <span className=\"green\"> [LEGOS] </span>.\n            </h1>\n            </div>\n                <div className=\"section2\">\n                <h1 className=\"header-text\">\n                    A beautiful tool that allows us to build\n                    <span className=\"green\">anything</span>\n                    we can imagine.\n                </h1>\n            </div>\n                <div className=\"section3 image-header1\">\n                    <div className=\"skills\">\n                        <h1 className=\"header-text1\">My favorite <span className=\"green\">bricks:</span></h1>\n                        <div className=\"skill1name no-wrap\">\n                            <h3>Node.js</h3>\n                        </div>\n                        <div className=\"skill1bar\">\n                            <div className=\"percentbar90\"></div>\n                        </div>\n                        <div className=\"skill1percentage \">\n                            <h3>90%</h3>\n                        </div>\n                        <div className=\"skill2name no-wrap\">\n                            <h3>Express</h3>\n                        </div>\n                        <div className=\"skill2bar\">\n                            <div className=\"percentbar80\"></div>\n                        </div>\n                        <div className=\"skill2percentage\">\n                            <h3>80%</h3>\n                        </div>\n                        <div className=\"skill3name no-wrap\">\n                            <h3>Database Design</h3>\n                        </div>\n                        <div className=\"skill3bar\">\n                            <div className=\"percentbar80\"></div>\n                        </div>\n                        <div className=\"skill3percentage\">\n                            <h3>80%</h3>\n                        </div>\n                        <div className=\"skill4name no-wrap\">\n                            <h3>HTML/CSS</h3>\n                        </div>\n                        <div className=\"skill4bar\">\n                            <div className=\"percentbar80\"></div>\n                        </div>\n                        <div className=\"skill4percentage\">\n                            <h3>80%</h3>\n                        </div>\n                        <div className=\"skill5name no-wrap\">\n                            <h3>Git</h3>\n                        </div>\n                        <div className=\"skill5bar\">\n                            <div className=\"percentbar80\"></div>\n                        </div>\n                        <div className=\"skill5percentage\">\n                            <h3>80%</h3>\n                        </div>\n                        <div className=\"skill6name no-wrap\">\n                            <h3>MySQL</h3>\n                        </div>\n                        <div className=\"skill6bar\">\n                            <div className=\"percentbar60\"></div>\n                        </div>\n                        <div className=\"skill6percentage\">\n                            <h3>60%</h3>\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\nexport default HomePage;","import React, { Component } from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport '../public/css/examplepage.css'\nimport nodelogo from '../public/images/NodeLogo.png'\nimport expressslogo from '../public/images/ExpressLogo.png'\nimport reactlogo from '../public/images/ReactLogo.png'\nimport jestlogo from '../public/images/JestLogo.png'\nimport mysqllogo from '../public/images/MySQLLogo.png'\n\n\nclass ExamplesPage extends Component {\n    render() {\n        return (\n            <>\n                <div className=\"node-example\">\n                    <NavLink className=\"bar-item roboto-text-thin\" to=\"/NodeController\">         \n                        <div className=\"card\">\n                            <img className=\"card-logo\" src={nodelogo}/>\n                            <h1 className=\"no-wrap-ellipsis\">Node Controller</h1>\n                        </div>\n                    </NavLink>\n\n            \n                    <NavLink className=\"bar-item roboto-text-thin\" to=\"/NodeService\">\n                        <div className=\"card\">\n                            <img className=\"card-logo\" src={nodelogo}/>\n                            <h1 className=\"no-wrap-ellipsis\">Node Services</h1>\n                        </div>\n                    </NavLink>\n\n\n                    <NavLink className=\"bar-item roboto-text-thin\" to=\"/Express\">\n                        <div className=\"card\">\n                            <img className=\"card-logo\" src={expressslogo}/>\n                            <h1 className=\"no-wrap-ellipsis\">Express</h1>\n                        </div>\n                    </NavLink>\n\n\n                    <NavLink className=\"bar-item roboto-text-thin\" to=\"/react\">\n                        <div className=\"card\">\n                            <img className=\"card-logo\" src={reactlogo}/>\n                            <h1 className=\"no-wrap-ellipsis\">React</h1>\n                        </div>\n                    </NavLink>\n\n                    <NavLink className=\"bar-item roboto-text-thin\" to=\"/Jest\">\n                        <div className=\"card\">\n                            <img className=\"card-logo\" src={jestlogo}/>\n                            <h1 className=\"no-wrap-ellipsis\">Jest testing</h1>\n                        </div>\n                    </NavLink >\n\n                    <NavLink className=\"bar-item roboto-text-thin\" to=\"/NodeMysql\">\n                        <div className=\"card\">\n                            <img className=\"card-logo\" src={mysqllogo}/>\n                            <h1 className=\"no-wrap-ellipsis\">MySQL2 Parameterized SQL</h1>\n                        </div>\n                    </NavLink>\n\n                    <NavLink className=\"bar-item roboto-text-thin\" to=\"/Mysql\">             \n                        <div className=\"card\">\n                            <img className=\"card-logo\" src={mysqllogo}/>\n                            <h1 className=\"no-wrap-ellipsis\">MySQL</h1>\n                        </div>\n                    </NavLink>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default ExamplesPage;","import React, { Component } from 'react';\nimport '../public/css/projectspage.css'\nimport building2 from '../public/images/Buildingnumber2.jpg'\n\n\nclass ProjectsPage extends Component {\n    render() {\n        return (\n            <>\n                <div className=\"top header-text header\">\n                    <img className=\"header-image\" src={building2}/>\n                        <div className=\"titleheader\">\n                            <h1><span className=\" green header thick\">Projects</span></h1>\n                        </div>\n                </div>\n\n                <div className=\"project-holder1\">\n                    <div className=\"project\">\n                        <div>\n                            <h1><span className=\"green  thick \">Project GreenBean</span></h1>\n                        </div>\n                        <div>\n                            <h2 className=\"green \">Project description:</h2>\n                            <h3>\n                                The goal of the project was to create a desktop application that could be installed on desktop computers that would allow\n                                users to create recipes and search for them based on ingredients they had at home.\n                            </h3>\n                        </div>\n                        <div>\n                            <h2 className=\"green\">contributors:</h2>\n                            <h3><span className=\"green\">Kyler Daybell</span> - database architect and backend API developer</h3>\n                            <h4><span className=\"green\">Brandon Isbell</span> - Front end API interaction systems architect</h4>\n                            <h4><span className=\"green\">Mike Vance</span> - Front end and design architect</h4>\n\n                        </div>\n                        <div>\n                            <h2 className=\"green\">Technology stack:</h2>\n                            <h4><span className=\"green\">API: </span>RESTful, Node.js, Express, Jest, MySQL, HTTPS, LetsEncrypt , GitHub build Pipelines </h4>\n                            <h4><span className=\"green\">Desktop Application:</span> React, Redux, Electron, Jest, HTML, CSS</h4>\n\n                        </div>\n                        <div>\n                            <h2 className=\"green\">Outcomes:</h2>\n                            <h3>\n                                This project was largely successful, our team was able to deliver a fully working, tested, and user friendly\n                                Our project was delivered on time. Our team was able to deliver an application that had lot of potential for easy\n                                growth based off of it api based nature. Due to the UX based front end focus our user experience was very good.\n                            </h3>\n\n                        </div>\n                        <div>\n                            <h2 className=\"green\">Lessons Learned:</h2>\n                            <h3>\n                                I learned a lot about making architecture decisions, The api based architecture and quality documentation means\n                                that the business logic of this application can be easily deployed and reused in other application formats such as web and mobile.\n                                Building the api in a MVC architecture with dependency injection made it really easy to change and add new features.\n                                I also learned a ton about the value of teamwork, proper task delegation, and reaching out to others for help.\n                            </h3>\n                            <a href='https://github.com/kylerdaybell/Project_GreenBean' className=\"button-green\">View on GitHub</a>\n                        </div>\n                    </div>\n                </div>\n\n\n\n                <div className=\"project-holder2\">\n                    <div className=\"project\">\n                        <div>\n                            <h1><span className=\"green  thick \">Sahara Schedule</span></h1>\n                        </div>\n                        <div>\n                            <h2 className=\"green \">Project description:</h2>\n                            <h3>\n                                the goal was to create a school scheduling app that was more tailored to students.\n                            </h3>\n                        </div>\n                        <div>\n                            <h2 className=\"green\">contributors:</h2>\n                            <h3><span className=\"green\">Kyler Daybell</span> - Solo fullstack developer</h3>\n\n                        </div>\n                        <div>\n                            <h2 className=\"green\">Technology stack:</h2>\n                            <h3><span className=\"green\">Website: </span> Node.js, Express, EJS, Jest, MySQL, MVC</h3>\n                        </div>\n                        <div>\n                            <h2 className=\"green\">Outcomes:</h2>\n                            <h3>\n                                This project was not completed due to other projects but the stack and integration of the stack was successful.\n                                The project was also a great learning experience.\n                            </h3>\n\n                        </div>\n                        <div>\n                            <h2 className=\"green\">Lessons Learned:</h2>\n                            <h3>\n                                This was my first attempt at a MVC structured application using Node.js and express.\n                                This was my first time using TDD or any kind of automated testing within javascript.\n                                I learned the value of TDD and automated testing within javascript when I was refactoring code.\n                                I learned one way to inject dependency's into services to alow for testing and mocking other services.\n                                I learned a lot about MVC structure EJS as a\n                                templating framework to present users with\n                                clean and consistent views.\n                            </h3>\n\n                        </div>\n                        <a href='https://github.com/kylerdaybell/project_Sahara' className=\"button-green\">View on GitHub</a>\n                    </div>\n                </div>\n\n                <div className=\"project-holder1\">\n                    <div className=\"project\">\n                        <div>\n                            <h1><span className=\"green header\">Project WhiteShirt</span></h1>\n                        </div>\n                        <div>\n                            <h2 className=\"green\">Project description:</h2>\n                            <h3>\n                                To create a video sharing platform with user accounts, custom generated views, and viewing history.\n                            </h3>\n                        </div>\n                        <div>\n                            <h2><span className=\"green\">Project Duration:</span> 6 months</h2>\n                        </div>\n                        <div>\n                            <h2 className=\"green\">contributors:</h2>\n                            <h3><span className=\"green\">Kyler Daybell</span> - fullstack developer</h3>\n                            <h3><span className=\"green\">Mike Vance</span> - Front end and design</h3>\n                        </div>\n                        <div>\n                            <h2 className=\"green\">Technology stack:</h2>\n                            <h3><span className=\"green\">Website: </span> Node.js, Express, MySQL, NodeMailer</h3>\n                        </div>\n                        <div>\n                            <h2 className=\"green\">Outcomes:</h2>\n                            <h3>\n                                This project was completed but was largely a failure due to inexperience in architecture with web applications.\n                                The final code was insecure and extremely hard to change. the project was monolithic with html being\n                                rendering in the same function as the database calls. The project did have some added features such as email validation via email.\n                                file and video storage with database links. password hashing before storage.\n                            </h3>\n\n                        </div>\n                        <div>\n                            <h2 className=\"green\">Lessons Learned:</h2>\n                            <h3>\n                                This was my first attempt at writing server side code. in doing so, I spent a lot of the time\n                                learning about the first way I could find to do things instead of doing them the right way.\n                                However in doing this I learned a lot about the wrong way of doing things and because\n                                I understood how frustrating doing things the wrong way can be I was very impressed when I later learned\n                                about MVC structuring.\n                                Due to the security issues the project was removed from github.\n                            </h3>\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default ProjectsPage;","import React, { Component } from 'react';\nimport '../../public/css/code.css';\nimport '../../public/css/prism.css';\n\n\n\nclass JestExample extends Component {\n    render() {\n        return (\n            <>\n                 <h1 className=\"header\">Jest testing framework</h1>\n    <div className=\"page-text\">\n        <p>\n            This jest testing framework, shows a category database service under test. \n            jest allows the first parameter of the test function to be the name of the test, this allows spaces to be in the name of the test\n            this allows tests to be better defined and more readable. \n            Note that the service uses dependency injection to mock database calls the service makes.\n\n        </p>\n    </div>\n    <pre className=\"code language-jsx\">\n            {`\n            var SaharaTestService = require('../services/SaharaTestService');\n            var CategoryDatabaseService = require('../services/CategoryService');\n            CategoryDatabaseService.constructor(SaharaTestService);\n            \n            test('Given a valid username and the user has created a category before the category model should return at least one category',async ()=>{\n                let categories = await CategoryDatabaseService.getAllCategories('kyler');\n                expect(categories.length).toBeGreaterThan(0);\n            })\n            \n            test('Given an invalid username the Category Model should return an empty list',async ()=>{\n                let categories = await CategoryDatabaseService.getAllCategories('bob');\n                expect(categories.length).toBeLessThanOrEqual(0);\n            })\n            \n            test('Given a user is logged in that user can add catagories to the database',async ()=>{\n                let WasCategoryAdded = await CategoryDatabaseService.addNewCategory('username','category name','category description','color');\n                expect(WasCategoryAdded).toBe(true);\n            })\n            \n            test('givin a valid category id a user who owns that category can edit and update it',async ()=>{\n                let WasCategoryEdited = await CategoryDatabaseService.updateCategory('kyler',1,'category name','category description','color');\n                expect(WasCategoryEdited).toBe(true);\n            })\n            \n            //this is a broken test we should really expect false\n            test('givin an invalid category id a user who owns that category can not edit and update it',async ()=>{\n                let WasCategoryEdited = await CategoryDatabaseService.updateCategory('bob',5,'category name','category description','color');\n                expect(WasCategoryEdited).toBe(false);\n            })\n            \n            test('givin a valid username the user can delete a category',async ()=>{\n                let WasCategoryEdited = await CategoryDatabaseService.removeCategory('kyler',1);\n                expect(WasCategoryEdited).toBe(true);\n            })`\n            }\n            </pre>\n            </>\n        );\n    }\n}\n\nexport default JestExample;","import React, { Component } from 'react';\nimport '../../public/css/prism.css';\nimport '../../public/css/code.css';\n\n\n\nclass MysqlExample extends Component {\n    render() {\n        return (\n            <>\n                <h1 className=\"header\">MySQL database</h1>\n                <pre className=\"code language-plsql\">{`\n                    DROP DATABASE greenbeans;\n                    create DATABASE greenbeans;\n                    USE greenbeans;\n\n                    CREATE TABLE USER(\n                        ID int NOT NULL AUTO_INCREMENT,\n                        EMAIL varchar(255) NOT NULL,\n                        PASSWORD varchar(255) NOT NULL,\n                        ROLE varchar(2555) NOT NULL,\n                        PRIMARY KEY (ID),\n                        UNIQUE KEY unique_email (EMAIL)\n                    );\n\n                    CREATE TABLE RECIPE(\n                        ID int NOT NULL AUTO_INCREMENT,\n                        USER_ID int NOT NULL,\n                        NAME varchar(255) NOT NULL,\n                        DESCRIPTION varchar(5500) NOT NULL,\n                        PICTURE varchar(255),\n                        PREP_TIME TIME,\n                        COOK_TIME TIME,\n                        INSTRUCTIONS varchar(5500) NOT NULL,\n                        CATEGORY varchar(255),\n                        FOREIGN KEY (USER_ID) REFERENCES USER(ID),\n                        PRIMARY KEY (ID)\n                    );\n                    \n                    CREATE UNIQUE INDEX userid_recipename\n                    ON RECIPE (USER_ID,NAME);\n\n                    CREATE TABLE INGREDIENT(\n                        ID int NOT NULL AUTO_INCREMENT,\n                        NAME varchar(255) NOT NULL,\n                        PRIMARY KEY(ID),\n                        UNIQUE KEY unique_ingredient_name (NAME)\n                    );\n\n                    CREATE TABLE RECIPETOINGREDIENT(\n                        ID int NOT NULL AUTO_INCREMENT,\n                        RECIPE_ID int NOT NULL,\n                        INGREDIENT_ID int NOT NULL,\n                        AMOUNT float NOT NULL,\n                        UNIT varchar(255) NOT NULL,\n                        FOREIGN KEY (RECIPE_ID) REFERENCES RECIPE(ID),\n                        FOREIGN KEY (INGREDIENT_ID) REFERENCES INGREDIENT(ID),\n                        PRIMARY KEY (ID)\n                    );\n\n                    CREATE UNIQUE INDEX duplicaterecipetoingredients\n                    ON RECIPETOINGREDIENT (RECIPE_ID,INGREDIENT_ID);\n                    `}</pre>\n            </>\n        );\n    }\n}\n\nexport default MysqlExample;","import React, { Component } from 'react';\nimport '../../public/css/prism.css';\nimport '../../public/css/code.css';\n\n\n\nclass NodeControllerExample extends Component {\n    render() {\n        return (\n            <>\n                <h1 class=\"header\">Node Api Controller</h1>\n    <div class=\"page-text\">\n        <p>\n            This controller was written to manage full CRUD of recipes, as well as search methods for recipes.\n            The goal of the controller in this project was to be small and simple. It is at the top of the abstraction tree.\n            It does not directly touch the database or any of the file system, Instead it lets the services do this and only \n            constructs models and passes them to the services. It should be noted that this controller is the controller of an api.\n        </p>\n    </div>\n    <pre class=\"code language-jsx\">\n            {`\n            var RecipeService = require('../services/RecipeService.js');\n            var UserService = require('../services/UserService.js');\n            var IngredientService = require('../services/IngredientService')\n            var ApiDatabaseService = require('../services/ApiDatabaseService.js');\n            var ImageService = require(\"../services/ImageService\")\n            var Recipe = require('../models/RecipeModel.js');\n            var User = require('../models/UserModel.js');\n            var ImageService = require(\"../services/ImageService\")\n            const BaseURL = process.env.URL;\n\n            UserService.constructor(ApiDatabaseService);\n            IngredientService.constructor(ApiDatabaseService);\n            RecipeService.constructor(ApiDatabaseService, UserService,IngredientService);\n\n            var RecipeController = {\n                PostCreateRecipe: async function(req, res){\n                    var ImageUrl = BaseURL + \"/images/DefaultImage.jpg\";\n                    ImageUrl = await ImageService.Convert64BitToImageUrl(req.body.picture);\n                    var recipe = new Recipe(null, null, req.body.name, req.body.descr, ImageUrl, req.body.preptime, \n                        req.body.cooktime, req.body.category,req.body.instructions, req.body.ingredientslist);\n                    var user = new User(req.body.email, req.body.password, null);\n                    if (await RecipeService.CreateRecipe(recipe, user)){\n                        res.write(JSON.stringify(\"Result: Success\"));\n                        res.end();\n                    }\n                    else{\n                        res.write(JSON.stringify(\"Result: Failure\"));\n                        res.end();\n                    }\n                },\n                GetRecipeById:async function(req,res){\n                    var RecipeID = req.params.id;\n                    var Recipe = await RecipeService.GetRecipeById(RecipeID);\n                    res.write(JSON.stringify(Recipe));\n                    res.end();\n                },\n                GetAllRecipes:async function(req,res){\n                    var RecipeList = await RecipeService.GetAllRecipes();\n                    res.write(JSON.stringify(RecipeList));\n                    res.end();\n                },\n                SearchRecipeByName: async function(req,res){\n                    var RecipeName = req.params.name;\n                    var RecipeList = await RecipeService.SearchRecipeByName(RecipeName);\n                    res.write(JSON.stringify(RecipeList));\n                    res.end();\n                },\n                UpdateRecipe: async function(req,res){\n                    var recipe = new Recipe(req.body.id, null, req.body.name, req.body.descr, req.body.picture, req.body.preptime, \n                        req.body.cooktime, req.body.category,req.body.instructions, req.body.ingredientslist);\n                    var user = new User(req.body.email, req.body.password, null);\n                    if (await RecipeService.UpdateRecipe(recipe, user)){\n                        console.log(recipe)\n                        res.write(JSON.stringify(\"Result: Success\"));\n                        res.end();\n                    }\n                    else{\n                        res.write(JSON.stringify(\"Result: Failure\"));\n                        res.end();\n                    }\n                },\n                DeleteRecipe: async function(req,res){\n                    var recipe = new Recipe(req.body.id);\n                    var user = new User(req.body.email, req.body.password, null);\n                    if (await RecipeService.DeleteRecipe(recipe, user)){\n                        res.write(JSON.stringify(\"Result: Success\"));\n                        res.end();\n                    }\n                    else{\n                        res.write(JSON.stringify(\"Result: Failure\"));\n                        res.end();\n                    }\n                },\n                GetRecipeByIngredientsList: async function(req,res){\n                    let IngredientsList = req.body.IngredientsList;\n                    var RecipeMatch = await RecipeService.SearchRecipesByIngredients(IngredientsList);\n                    res.write(JSON.stringify(RecipeMatch));\n                    res.end();\n                },\n                GetRecipeByCategory: async function(req,res){\n                    let category = req.params.category;\n                    let RecipeMatch = await RecipeService.GetRecipesByCategory(category);\n                    res.write(JSON.stringify(RecipeMatch));\n                    res.end();\n                },\n                GetRecipeByEmail:async function(req,res){\n                    let email = req.params.email;\n                    let RecipeMatch = await RecipeService.GetRecipesByEmail(email);\n                    res.write(JSON.stringify(RecipeMatch));\n                    res.end();\n                },\n                GetTopTenRecipes: async function(req,res){\n                    var RecipeList = await RecipeService.GetTopTenRecipes();\n                    res.write(JSON.stringify(RecipeList));\n                    res.end();\n                },\n                GetRecipeAdvancedSearch: async function(req, res) {\n                    let IngredientsList = req.body.IngredientsList;\n                    let category = req.body.category;\n                    let email = req.body.email;\n                    let RecipeMatch = [];\n                    if(typeof IngredientsList !== 'undefined'){\n                        RecipeMatch = await RecipeService.SearchRecipesByIngredients(IngredientsList)\n                    }else if(typeof category !== 'undefined'){\n                        RecipeMatch = await RecipeService.GetRecipesByCategory(category);\n                    }else if(typeof email !== 'undefined'){\n                        RecipeMatch = await RecipeService.GetRecipesByEmail(email);\n                    }\n                    res.write(JSON.stringify(RecipeMatch));\n                    res.end();\n                }\n            }\n\n            module.exports = RecipeController;\n                    `}\n                </pre>\n            </>\n        );\n    }\n}\n\nexport default NodeControllerExample;","import React, { Component } from 'react';\nimport '../../public/css/prism.css';\nimport '../../public/css/code.css';\n\n\n\nclass NodeServiceExample extends Component {\n    render() {\n        return (\n            <>\n                <h1 class=\"header\">Node Service</h1>\n                <div class=\"page-text\">\n                    <p>\n                        This is the recipe service, it uses dependency injection to allow for testing. the service also uses clean code abstraction techniques. \n                        This means that the functions towards the top of the file depend on the functions towards the bottom, this means that the functions remain small,\n                        readable, and at a consistent level of abstraction.  \n                    </p>\n                </div>\n                    <pre class=\"code language-jsx\">\n                        {`\n                        var IApiDatabaseService;\n                        var User = require('../models/UserModel.js');\n                        var Recipe = require('../models/RecipeModel.js');\n                        var RecipeMatch = require('../models/RecipeMatchModel.js');\n                        var IIngredientService;\n                        var IUserService;\n\n                        var RecipeService = {\n                            constructor: function(IApiDatabaseServiceInsert, IUserServiceInsert,IIngredientServiceInsert){\n                                IIngredientService = IIngredientServiceInsert;\n                                IApiDatabaseService = IApiDatabaseServiceInsert;\n                                IUserService = IUserServiceInsert;\n                            },\n                            CreateRecipe: async function(recipe, user){\n                                if (await IUserService.LoginUser(user)){\n                                    recipe.userid = await IUserService.GetUserID(user);\n                                    if(recipe.userid != 0){\n                                        if(await this.CheckDuplicate(recipe)){\n                                            var recipeID = await this.AddRecipe(recipe);\n                                            if(recipeID != 0){\n                                                recipe.id = recipeID;\n                                                await IIngredientService.AddIngredients(recipe);\n                                                return true;\n                                            }else{\n                                                return false\n                                            }\n                                        }else{\n                                            return false;\n                                        }\n                                    }else{\n                                        return false;\n                                    }           \n                                }\n                                else{\n                                    return false;\n                                }\n                            },\n                            GetTopTenRecipes: async function(){\n                                let DatabaseResult = await IApiDatabaseService.GetTopTenRecipes();\n                                var RecipeList = this.DatabaseResultToRecipeList(DatabaseResult)\n                                return RecipeList;\n                            },\n                            GetAllRecipes: async function(){\n                                let DatabaseResult = await IApiDatabaseService.GetAllRecipes();\n                                var RecipeList = this.DatabaseResultToRecipeList(DatabaseResult)\n                                return RecipeList;\n                            },\n                            GetRecipeById: async function(RecipeID){\n                                let DatabaseResult = await IApiDatabaseService.GetRecipeByID(RecipeID);\n                                if(typeof DatabaseResult[0][0] != 'undefined'){\n                                    var recipe = await this.DatabaseResultToRecipe(DatabaseResult[0][0]);\n                                }else{\n                                    var recipe = new Recipe();\n                                }\n                                return recipe; \n                            },    \n                            GetRecipesByCategory: async function(category){\n                                let DatabaseResult = await IApiDatabaseService.SearchRecipeByCategory(category);\n                                var RecipeList = this.DatabaseResultToRecipeList(DatabaseResult)\n                                return RecipeList;\n                            },\n                            SearchRecipeByName: async function(RecipeName){\n                                let DatabaseResult = await IApiDatabaseService.SearchRecipeByName(RecipeName);\n                                var RecipeList = this.DatabaseResultToRecipeList(DatabaseResult)\n                                return RecipeList;\n                            },\n                            GetRecipesByEmail: async function(email){\n                                let DatabaseResult = await IApiDatabaseService.SearchRecipeByEmail(email);\n                                var RecipeList = this.DatabaseResultToRecipeList(DatabaseResult)\n                                return RecipeList;\n                            },\n                            SearchRecipesByIngredients: async function(IngredientsList){\n                                let ListOfAllMatchingRecipes = [];\n                                for(let i = 0;i < IngredientsList.length;i++){\n                                    let Ingredient = IngredientsList[i]\n                                    ListOfAllMatchingRecipes = await this.SearchRecipeBySingleIngredient(ListOfAllMatchingRecipes,Ingredient)\n                                }\n                                let RecipeAndMatchesDictionary = await this.MapRecipesToNumberOfIngredientMatches(ListOfAllMatchingRecipes)\n                                let RecipeByPercentMatch = await this.GetRecipesPercentMatch(RecipeAndMatchesDictionary);   \n                                let CompletedRecipeSearchList = await this.AssembleRecipeAndPercentMatch(RecipeByPercentMatch);\n                                return CompletedRecipeSearchList;\n\n                            },\n                            UpdateRecipe: async function(Recipe,User){\n                                if (await IUserService.LoginUser(User)){\n                                    UserID = await IUserService.GetUserID(User)\n                                    DatabaseResult = await IApiDatabaseService.GetRecipeByID(Recipe.id)\n                                    if(typeof DatabaseResult[0][0] != 'undefined'){\n                                        Recipe.userid = DatabaseResult[0][0][\"USER_ID\"];\n                                        if(UserID == Recipe.userid){\n                                            await IApiDatabaseService.DeleteRecipeToIngredientByRecipeID(Recipe.id);\n                                            await IIngredientService.AddIngredients(Recipe);\n                                            await IApiDatabaseService.UpdateRecipe(Recipe);\n                                            return true;\n                                        }\n                                    }\n\n                                }\n                                return false;\n                            },\n                            AddRecipe: async function(recipe){\n                                let DatabaseResult = await IApiDatabaseService.GetRecipeID(recipe);\n                                if(typeof DatabaseResult[0][0] != \"undefined\"){\n                                    return DatabaseResult[0][0][\"ID\"];\n                                }else{\n                                    await IApiDatabaseService.AddRecipe(recipe);\n                                    DatabaseResult = await IApiDatabaseService.GetRecipeID(recipe);\n                                    let recipeid = DatabaseResult[0][0][\"ID\"];\n                                    if(typeof recipeid != 'undefined'){\n                                        return recipeid; \n                                    }else{\n                                        return 0;\n                                    }\n                                }\n                            },\n                            CheckDuplicate: async function(recipe){\n                                let DatabaseResult = await IApiDatabaseService.GetRecipeByUsernameAndRecipename(recipe.name,recipe.userid);\n                                if(typeof DatabaseResult[0][0]!== 'undefined'){\n                                    return false;\n                                }\n                                return true;\n                            },\n                            SearchRecipeBySingleIngredient: async function(ListOfAllMatchingRecipes,Ingredient){ \n                                let DatabaseResult = await IApiDatabaseService.SearchRecipeByIngredient(Ingredient.name);\n                                    if(typeof DatabaseResult[0]!= 'undefined'){\n                                        for(let j = 0;  j <  DatabaseResult[0].length; j++){\n                                            ListOfAllMatchingRecipes.push(DatabaseResult[0][j][\"ID\"]);\n                                        }\n                                    }\n                                return ListOfAllMatchingRecipes;\n                            },\n                            MapRecipesToNumberOfIngredientMatches: async function(ListOfAllMatchingRecipes){\n                                var RecipeAndMatchesDictionary = {}\n                                for(let i = 0;i < ListOfAllMatchingRecipes.length;i++){\n                                    if(typeof RecipeAndMatchesDictionary[ListOfAllMatchingRecipes[i]] == 'undefined'){\n                                        RecipeAndMatchesDictionary[ListOfAllMatchingRecipes[i]] = 1\n                                    }else{\n                                        RecipeAndMatchesDictionary[ListOfAllMatchingRecipes[i]] =  RecipeAndMatchesDictionary[ListOfAllMatchingRecipes[i]]+1\n                                    }\n                                }\n                                return RecipeAndMatchesDictionary\n                            },\n                            AssembleRecipeAndPercentMatch: async function(RecipeByPercentMatch){\n                                let CompletedRecipeSearchList = []\n                                for(var key in RecipeByPercentMatch){\n                                    let recipe = await this.GetRecipeById(key);\n                                    let recipematch = new RecipeMatch(recipe,RecipeByPercentMatch[key]);\n                                    CompletedRecipeSearchList.push(recipematch);\n                                }\n                                return CompletedRecipeSearchList;\n                            },\n                            GetRecipesPercentMatch: async function(RecipeAndMatchesDictionary){\n                                let RecipePercentMatchDictionary = {}\n                                for(var key in RecipeAndMatchesDictionary){\n                                    let NumberOfTotalIngredients = await this.GetNumberOfIngredientsByRecipeId(key);\n                                    let NumberOfMatchingIngredients = RecipeAndMatchesDictionary[key];\n                                    let PercentMatch = (NumberOfMatchingIngredients/NumberOfTotalIngredients)*100\n                                    RecipePercentMatchDictionary[key] = PercentMatch;\n                                }\n                                return RecipePercentMatchDictionary;\n                                \n                            },\n                            GetNumberOfIngredientsByRecipeId: async function(RecipeID){\n                                let DatabaseResult = await IApiDatabaseService.GetNumberOfIngredientsByRecipeId(RecipeID);\n                                if(typeof DatabaseResult[0][0] != 'undefined'){\n                                    return DatabaseResult[0][0][\"count(*)\"]\n                                }else{\n                                    return 0;\n                                }\n                            },\n                            DeleteRecipe: async function(Recipe,User){\n                                if (await IUserService.LoginUser(User)){\n                                    UserID = await IUserService.GetUserID(User)\n                                    DatabaseResult = await IApiDatabaseService.GetRecipeByID(Recipe.id)\n                                    if(typeof DatabaseResult[0][0] != 'undefined'){\n                                        Recipe.userid = DatabaseResult[0][0][\"USER_ID\"];\n                                        if(UserID == Recipe.userid){\n                                            await IApiDatabaseService.DeleteRecipeToIngredientByRecipeID(Recipe.id);\n                                            await IApiDatabaseService.DeleteRecipeByID(Recipe.id);\n                                            return true;\n                                        }\n                                    }\n\n                                }\n                                return false;\n                            },\n                            DatabaseResultToRecipeList: async function(DatabaseResultList){\n                                let RecipeList = []\n                                for(let i = 0; i < DatabaseResultList[0].length; i++){\n                                    let recipe = await this.DatabaseResultToRecipe(DatabaseResultList[0][i]);\n                                    var newrecipe = {\"recipe\":recipe};\n                                    RecipeList.push(newrecipe);\n                                }\n                                return RecipeList;\n                            },\n                            DatabaseResultToRecipe: async function(DatabaseResult){\n                                let recipe = new Recipe(DatabaseResult[\"ID\"],DatabaseResult[\"USER_ID\"],DatabaseResult[\"NAME\"],DatabaseResult[\"DESCRIPTION\"],\n                                DatabaseResult[\"PICTURE\"],DatabaseResult[\"PREP_TIME\"],DatabaseResult[\"COOK_TIME\"],DatabaseResult[\"CATEGORY\"],DatabaseResult[\"INSTRUCTIONS\"]);\n                                recipe.ingredientslist = await IIngredientService.GetListOfIngredientsByRecipeID(recipe.id);\n                                return recipe;\n                            }\n                        }\n\n                        module.exports = RecipeService;\n                    `}\n                </pre>\n            </>\n        );\n    }\n}\n\nexport default NodeServiceExample;","import React, { Component } from 'react';\nimport '../../public/css/prism.css';\nimport '../../public/css/code.css';\n\n\n\nclass ExpressExample extends Component {\n    render() {\n        return (\n            <>\n                <h1 class=\"header\">Express Routing</h1>\n                <div class=\"page-text\">\n                    <p>\n                        This file demonstrates the routing of a recipe service api. This express features static file serving, https using letsencrypt, and controllers.\n                    </p>\n                </div>\n                    <pre class=\"code language-jsx\">\n                        {`\n                            var express = require('express');\n                            const fs = require('fs');\n                            var cors = require('cors');\n                            const https = require('https');\n                            var app = express();\n                            var whitelist = \"http:/144.17.24.16\";\n                            var userController = require('./controllers/UserController.js');\n                            var recipeController = require('./controllers/RecipeController.js');\n                            const bodyParser = require('body-parser');\n                            app.use(bodyParser.json({limit: '50mb', type: 'application/json'}));\n                            app.use('/images',express.static('Images'))\n                            global.__basedir = __dirname;\n                            const port = process.env.PORT || 80;\n\n                            if(process.env.NODE_ENV === \"development\"){\n                            app.listen(port, () => {\n                                console.log(\"Development Server running on port \"+port);\n                            });\n                            }else {\n                            const privateKey = fs.readFileSync('/etc/letsencrypt/live/api.greenbeancooking.com/privkey.pem', 'utf8');\n                            const certificate = fs.readFileSync('/etc/letsencrypt/live/api.greenbeancooking.com/cert.pem', 'utf8');\n                            const ca = fs.readFileSync('/etc/letsencrypt/live/api.greenbeancooking.com/chain.pem', 'utf8');\n\n                            const credentials = {\n                                key: privateKey,\n                                cert: certificate,\n                                ca: ca\n                            };\n\n                            const httpsServer = https.createServer(credentials, app);\n\n                            httpsServer.listen(443, () => {\n                                console.log('HTTPS Server running on port 443');\n                            });\n                            }\n\n\n                            var corsOptions={\n                                origin:function(origin,callback){\n                                if(whitelist.indexOf(origin)===-1){\n                                    callback(null,true)\n                                }else{\n                                    console.log(\"blocked by cors\")\n                                    callback(new Error('not allowed by cors'))\n                                }\n                                }\n                            }\n\n\n                            //login area\n                            app.post('/register',cors(corsOptions),function(req,res){\n                                console.log(\"register\");\n                                userController.PostRegisterUser(req, res);\n                            });\n\n                            app.post('/login',cors(corsOptions),function(req,res){\n                            console.log(\"login\");\n                            userController.PostLoginUser(req, res);\n                            });\n\n                            //recipe controller area\n                            app.post('/createrecipe',cors(corsOptions),function(req,res){\n                            console.log(\"createrecipe\");\n                            recipeController.PostCreateRecipe(req, res);\n                            });\n\n                            app.get('/getrecipebyid/:id',cors(corsOptions),function(req,res){\n                            console.log(\"getrecipebyid\");\n                            recipeController.GetRecipeById(req,res);\n                            });\n\n                            app.get('/getallrecipes',cors(corsOptions),function(req,res){\n                            console.log(\"getallrecipes\");\n                            recipeController.GetAllRecipes(req,res);\n                            });\n\n                            app.get('/gettoptenrecipes',cors(corsOptions),function(req,res){\n                            console.log(\"gettoptenrecipes\");\n                            recipeController.GetTopTenRecipes(req,res);\n                            });\n\n\n\n                            app.get('/searchrecipebyname/:name',cors(corsOptions),function(req,res){\n                            console.log(\"searchrecipebyname\");\n                            recipeController.SearchRecipeByName(req,res);\n                            });\n\n                            app.post('/updaterecipe',cors(corsOptions),function(req,res){\n                            console.log(\"updaterecipe\");\n                            recipeController.UpdateRecipe(req,res);\n                            });\n\n                            app.post('/deleterecipe',cors(corsOptions),function(req,res){\n                            console.log(\"deleterecipe\");\n                            recipeController.DeleteRecipe(req,res);\n                            })\n\n                            app.post('/getrecipebyingredientslist',cors(corsOptions),function(req,res){\n                            console.log(\"/getrecipebyingredientslist\");\n                            recipeController.GetRecipeByIngredientsList(req,res);\n                            })\n\n                            app.get('/getrecipebycategory/:category',cors(corsOptions),function(req,res){\n                            console.log(\"/getrecipebycategory\");\n                            recipeController.GetRecipeByCategory(req,res);\n                            })\n\n                            app.get('/getrecipebyemail/:email',cors(corsOptions),function(req,res){\n                            console.log(\"/getrecipebyemail\");\n                            recipeController.GetRecipeByEmail(req,res);\n                            })\n\n                            app.post('/getRecipeAdvancedSearch',cors(corsOptions),function(req,res){\n                            console.log(\"/getRecipeAdvancedSearch\");\n                            recipeController.GetRecipeAdvancedSearch(req,res);\n                            })\n                    `}\n                </pre>\n            </>\n        );\n    }\n}\n\nexport default ExpressExample;","import React, { Component } from 'react';\nimport '../../public/css/prism.css';\nimport '../../public/css/code.css';\n\n\n\nclass NodeMysqlExample extends Component {\n    render() {\n        return (\n            <>\n                <h1 class=\"header\">MySQL2</h1>\n                <div class=\"page-text\">\n                    <p>\n                        using paramiterized sql to access a mysql database\n                    </p>\n                </div>\n                    <pre class=\"code language-jsx\">\n                        {`\n                            require('dotenv').config();\n                            const DB_HOST = process.env.DB_HOST;\n                            const DB_USER = process.env.DB_USER;\n                            const DB_PASS = process.env.DB_PASS;\n                            const DB_DATA = process.env.DB_DATA;\n\n\n\n                            var mysql = require('mysql2/promise');\n\n                            var ApiDatabaseService = {\n                                getConnection: async function(){\n                                    const con = await mysql.createConnection({\n                                        host: DB_HOST,\n                                        user: DB_USER,\n                                        password: DB_PASS,\n                                        database: DB_DATA\n                                    });\n                                    return con;\n                                },\n                                GetUser: async function(email){\n                                    const con = await this.getConnection();\n                                    var [rows] = await con.execute('select * from USER WHERE EMAIL = ?', [email]);\n                                    con.end()\n                                    return rows;\n\n                                },\n                                RegisterUser: async function(user){\n                                    const con = await this.getConnection();\n                                    con.execute('INSERT INTO USER (EMAIL,PASSWORD,ROLE) VALUE (?,?,?)', [user.email, user.password, user.role]);\n                                    con.end()\n                                },\n                                AddRecipe: async function(recipe){\n                                    const con = await this.getConnection();\n                                    con.execute('INSERT INTO RECIPE(USER_ID,NAME,DESCRIPTION,PICTURE,PREP_TIME,COOK_TIME,CATEGORY,INSTRUCTIONS) VALUE (?,?,?,?,?,?,?,?)', \n                                        [recipe.userid, recipe.name, recipe.descr, recipe.picture, recipe.preptime, recipe.cooktime, recipe.category,recipe.instructions]);\n                                    con.end()\n                                },\n                                GetRecipeID: async function(recipe){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('SELECT ID FROM RECIPE WHERE USER_ID = ? AND NAME = ?',[recipe.userid,recipe.name]);\n                                    con.end()\n                                    return rows;\n                                },\n                                GetIngredient:async function(ingredient){\n                                    const con = await this.getConnection();\n                                    var rows = await con.execute('SELECT * FROM INGREDIENT WHERE NAME = ?',[ingredient])\n                                    con.end()\n                                    return rows;\n                                },\n                                AddIngredient: async function(ingredient){\n                                    const con = await this.getConnection();\n                                    con.execute('INSERT INTO INGREDIENT (NAME) VALUES (?)',[ingredient])\n                                    con.end()\n                                },\n                                GetIngredientID: async function(ingredient){\n                                    const con = await this.getConnection();\n                                    var rows = await con.execute('SELECT ID FROM INGREDIENT WHERE NAME = ?',[ingredient])\n                                    con.end()\n                                    return rows;\n                                },\n                                LinkIngredientToRecipe: async function(recipeID,IngredientID,Ingredient){\n                                    const con = await this.getConnection();\n                                    con.execute('INSERT INTO RECIPETOINGREDIENT (RECIPE_ID,INGREDIENT_ID,AMOUNT,UNIT) VALUES (?,?,?,?)',[recipeID,IngredientID,Ingredient.amount,Ingredient.unit])\n                                    con.end()\n                                },\n                                GetListOfIngredientsByRecipeID: async function(RecipeID){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('SELECT * FROM RECIPETOINGREDIENT a inner join INGREDIENT b on (a.INGREDIENT_ID = b.ID) WHERE a.RECIPE_ID = ?',[RecipeID]);\n                                    con.end()\n                                    return rows;\n                                },\n                                GetRecipeByID: async function(RecipeID){\n                                    const con = await this.getConnection();\n                                    row = await con.execute('SELECT * FROM RECIPE WHERE ID = ?',[RecipeID]);\n                                    con.end()\n                                    return row;\n                                },\n                                GetAllRecipes: async function(){\n                                    const con = await this.getConnection();\n                                    row = await con.execute('SELECT * FROM RECIPE ');\n                                    con.end()\n                                    return row;\n                                },\n                                GetTopTenRecipes: async function(){\n                                    const con = await this.getConnection();\n                                    row = await con.execute('SELECT * FROM RECIPE LIMIT 10');\n                                    con.end()\n                                    return row;\n                                },\n                                SearchRecipeByName: async function(RecipeName){\n                                    const con = await this.getConnection();\n                                    RecipeNameWithWildCards = \"%\"+RecipeName+\"%\"\n                                    row = await con.execute('SELECT * FROM RECIPE WHERE NAME LIKE ?',[RecipeNameWithWildCards]);\n                                    con.end()\n                                    return row;\n                                },\n                                GetIngredientToRecipeByForeignKeys: async function(RecipeID,IngredientID){\n                                    const con = await this.getConnection();\n                                    row = await con.execute('SELECT * FROM RECIPETOINGREDIENT WHERE RECIPE_ID = ? AND INGREDIENT_ID = ?',[RecipeID,IngredientID]);\n                                    con.end()\n                                    return row;\n                                },\n                                DeleteRecipeToIngredientByRecipeID: async function(RecipeID){\n                                    const con = await this.getConnection();\n                                    row = await con.execute('DELETE FROM RECIPETOINGREDIENT where RECIPE_ID = ?',[RecipeID]);\n                                    con.end()\n                                    return row;\n                                },\n                                DeleteRecipeByID: async function(RecipeID){\n                                    const con = await this.getConnection();\n                                    row = await con.execute('DELETE FROM RECIPE where ID = ?',[RecipeID]);\n                                    con.end()\n                                    return row;\n                                },\n                                UpdateRecipe: async function(recipe){\n                                    const con = await this.getConnection();\n                                    con.execute('UPDATE RECIPE SET NAME = ?, DESCRIPTION = ?,PICTURE = ?,PREP_TIME = ?,COOK_TIME = ?,CATEGORY=?,INSTRUCTIONS = ? WHERE ID = ?', \n                                        [ recipe.name, recipe.descr, recipe.picture, recipe.preptime, recipe.cooktime, recipe.category , recipe.instructions,recipe.id]);\n                                    con.end()\n                                },\n                                SearchRecipeByIngredient: async function(IngredientName){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('Select a.ID from RECIPE a inner join RECIPETOINGREDIENT b on (a.ID = b.RECIPE_ID) inner join INGREDIENT c on (b.INGREDIENT_ID = c.ID) where c.NAME = ?',[IngredientName]);\n                                    con.end()\n                                    return rows;\n                                },\n                                GetNumberOfIngredientsByRecipeId: async function(RecipeID){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('Select count(*) from RECIPETOINGREDIENT a  inner join INGREDIENT b on (a.INGREDIENT_ID = b.ID) where a.RECIPE_ID = ? GROUP BY a.RECIPE_ID',[RecipeID]);\n                                    con.end()\n                                    return rows;\n                                },\n                                SearchRecipeByCategory: async function(category){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('Select * from RECIPE where CATEGORY = ?',[category]);\n                                    con.end()\n                                    return rows;\n                                },\n                                SearchRecipeByEmail: async function(email){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('Select * from USER a inner join RECIPE b on (a.ID = b.USER_ID) where a.EMAIL = ?',[email]);\n                                    con.end()\n                                    return rows;\n                                },\n                                GetRecipeByUsernameAndRecipename: async function(recipename,userid){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('Select * from RECIPE where NAME = ? AND USER_ID = ?',[recipename,userid]);\n                                    con.end()\n                                    return rows;\n                                }\n                            }\n\n                            module.exports = ApiDatabaseService;\n                    `}\n                </pre>\n            </>\n        );\n    }\n}\n\nexport default NodeMysqlExample;","import React, { Component } from 'react';\nimport '../../public/css/prism.css';\nimport '../../public/css/code.css';\n\n\n\nclass ReactExample extends Component {\n    render() {\n        return (\n            <>\n                <h1 class=\"header\">React</h1>\n                <div class=\"page-text\">\n                    <p>\n                        A simple react search page, this react page uses redux.\n                    </p>\n                </div>\n                    <pre class=\"code language-jsx\">\n                        {`\n                        import React from \"react\";\n                        import PageTitle from \"../shared/PageTitle\";\n                        import RecipeCard from \"../shared/RecipeCard\";\n                        import \"../../css/main.css\";\n                        import recipeCategories from \"../addRecipePage/recipeCategories\"\n                        import { bindActionCreators } from \"redux\";\n                        import { connect } from \"react-redux\";\n                        import * as actionCreators from \"../../store/actions/actions\";\n                        const SearchByCategory = props => {\n                          var selectedItem = \"\";\n                          if (props.recipes.length > 0)\n                          {\n                            selectedItem = props.recipes[0].recipe.category;\n                          }\n                          return (\n                            <>\n                            \n                              <PageTitle title={\"Search By Category\"} />\n                              <div className=\"fitBody\"> \n                              <div className=\"searchBarLayout\">\n                              <div className=\"searchSpan\">\n                              <select className=\"w3-select w3-border categorySearch\" defaultValue={selectedItem} id=\"category\" name=\"option\" onChange={(event) =>\n                                  props.SearchForRecipeByCategory(event.target.value)\n                                }>\n                                <option value=\"\" disabled>No Category Selected</option>\n                                {recipeCategories.map((category, key)=> (\n                                  <option key={key} value={category[0]}>{category[0]}</option>\n                                ))}\n                              </select>\n                              </div>\n                              </div>\n                              <div className=\"homeRecipePadding\">\n                                  {props.recipes.map((recipe, index) => (\n                                    <RecipeCard recipe={recipe} key={index} />\n                                  ))}\n                                </div>\n                              </div>\n                            </>\n                          );\n                        };\n                        \n                        const mapStateToProps = state => {\n                          return {\n                            recipes: state.greenBeanAPI.recipes\n                          };\n                        };\n                        \n                        export default connect(\n                          mapStateToProps,\n                          dispatch => bindActionCreators(actionCreators, dispatch)\n                        )(SearchByCategory);\n                    `}\n                </pre>\n            </>\n        );\n    }\n}\n\nexport default ReactExample;","import React, { Component } from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport singlelinelogo from '../public/images/Single-Line-Logo.png'\nclass Navbar extends Component {\n    render() {\n      return (\n        <div className=\"bar\">\n            <NavLink className=\"bar-item-main roboto-text-thin\" to=\"/\">\n              kylerdaybell.com\n            </NavLink >\n            <NavLink className=\"bar-item roboto-text-thin\" to=\"/Projects\">\n              projects\n            </NavLink >\n            <NavLink className=\"bar-item roboto-text-thin\" to=\"/Examples\">\n              examples\n            </NavLink >\n        </div>\n      );\n    }\n  }\n\nexport default Navbar;","import React, { Component } from 'react';\nimport '../public/css/404.css'\n\nclass Notfound extends Component{\n    render() {\n        return (\n            <>\n            <div class=\"header-text\">\n                <h1>404 Error: This page does not exist</h1>\n                <a href=\"/\" class=\"button\">Take me home</a>\n            </div>\n\n            <div class=\"image-header\">\n            </div>\n            </>\n          );\n    }\n}\nexport default Notfound;","import React from 'react';\nimport { Route, Switch } from \"react-router\";\nimport HomePage from './components/home';\nimport AboutPage from './components/about'\nimport ExamplesPage from './components/examples'\nimport ProjectsPage from './components/projects'\nimport JestExample from './components/code-examples/jest'\nimport MysqlExample from './components/code-examples/mysql'\nimport NodeControllerExample from './components/code-examples/nodecontroller'\nimport NodeServiceExample from './components/code-examples/nodeservices'\nimport ExpressExample from './components/code-examples/express'\nimport NodeMysqlExample from './components/code-examples/nodemysql'\nimport ReactExample from './components/code-examples/react'\nimport Navbar from './components/navbar';\nimport Notfound from './components/notfound'\nimport './public/css/App.css';\n\n\nfunction App() {\n  return (\n    <>\n    <Navbar/>\n    <div className=\"container\">\n      <Switch>\n        <Route exact path=\"/\" component={AboutPage} />\n        <Route path=\"/Examples\" component={ExamplesPage} />\n        <Route path=\"/Projects\" component={ProjectsPage} />\n        <Route path=\"/Jest\" component={JestExample} />\n        <Route path=\"/Mysql\" component={MysqlExample} />\n        <Route path=\"/NodeController\" component={NodeControllerExample} />\n        <Route path=\"/NodeService\" component={NodeServiceExample} />\n        <Route path=\"/Express\" component={ExpressExample} />\n        <Route path=\"/NodeMysql\" component={NodeMysqlExample} />\n        <Route path=\"/React\" component={ReactExample} />\n        <Route path=\"/404\" component={Notfound} />\n        <Route component={Notfound} />\n      </Switch>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './public/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}