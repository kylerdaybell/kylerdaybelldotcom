{"version":3,"sources":["public/images/logo.png","public/images/Group.jpg","public/images/Single-Line-Logo.png","components/home.jsx","components/navbar.jsx","components/notfound.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Homepage","class","Component","Navbar","href","Notfound","className","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qLAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,wCCA3CD,EAAOC,QAAU,IAA0B,8C,qJCuF5BC,G,yLA/EP,OACI,oCACA,yBAAKC,MAAM,YACX,wBAAIA,MAAM,eACN,0BAAMA,MAAM,SAAZ,SADJ,wBAGI,0BAAMA,MAAM,SAAZ,WAHJ,MAMI,yBAAKA,MAAM,YACX,wBAAIA,MAAM,eAAV,2CAEI,0BAAMA,MAAM,SAAZ,YAFJ,oBAMA,yBAAKA,MAAM,0BACP,yBAAKA,MAAM,UACP,wBAAIA,MAAM,gBAAV,eAAqC,0BAAMA,MAAM,SAAZ,YACrC,yBAAKA,MAAM,sBACP,wCAEJ,yBAAKA,MAAM,aACP,yBAAKA,MAAM,kBAEf,yBAAKA,MAAM,qBACP,oCAEJ,yBAAKA,MAAM,sBACP,wCAEJ,yBAAKA,MAAM,aACP,yBAAKA,MAAM,kBAEf,yBAAKA,MAAM,oBACP,oCAEJ,yBAAKA,MAAM,sBACP,gDAEJ,yBAAKA,MAAM,aACP,yBAAKA,MAAM,kBAEf,yBAAKA,MAAM,oBACP,oCAEJ,yBAAKA,MAAM,sBACP,yCAEJ,yBAAKA,MAAM,aACP,yBAAKA,MAAM,kBAEf,yBAAKA,MAAM,oBACP,oCAEJ,yBAAKA,MAAM,sBACP,oCAEJ,yBAAKA,MAAM,aACP,yBAAKA,MAAM,kBAEf,yBAAKA,MAAM,oBACP,oCAEJ,yBAAKA,MAAM,sBACP,sCAEJ,yBAAKA,MAAM,aACP,yBAAKA,MAAM,kBAEf,yBAAKA,MAAM,oBACP,2C,GAzELC,cCSRC,G,6KAXT,OACE,yBAAKF,MAAM,OACP,uBAAGG,KAAK,IAAIH,MAAM,kCAAlB,oBACA,uBAAGG,KAAK,SAASH,MAAM,6BAAvB,SACA,uBAAGG,KAAK,YAAYH,MAAM,6BAA1B,YACA,uBAAGG,KAAK,YAAYH,MAAM,6BAA1B,iB,GAPSC,cCUNG,E,uKAPP,OACI,yBAAKC,UAAU,OACX,gF,GAJOJ,a,MCoBRK,MAff,WACE,OACE,oCACA,kBAAC,EAAD,MACA,yBAAKD,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOS,KAAK,OAAOC,UAAWL,IAC9B,kBAAC,IAAD,CAAOK,UAAWL,QCJNM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4464c4a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.665e1249.png\";","module.exports = __webpack_public_path__ + \"static/media/Group.2184ecc0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Single-Line-Logo.9a490b45.png\";","import React, { Component } from 'react';\r\nimport logo from '../public/images/logo.png';\r\nimport group from '../public/images/Group.jpg';\r\nimport '../public/css/homepage.css'\r\n\r\n\r\nclass Homepage extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n            <div class=\"section1\">\r\n            <h1 class=\"header-text\">\r\n                <span class=\"green\"> Code</span>\r\n                is the coolest set of\r\n                <span class=\"green\">[LEGOS]</span>.\r\n            </h1>\r\n            </div>\r\n                <div class=\"section2\">\r\n                <h1 class=\"header-text\">\r\n                    A beautiful tool that allows us to build\r\n                    <span class=\"green\">anything</span>\r\n                    we can imagine.\r\n                </h1>\r\n            </div>\r\n                <div class=\"section3 image-header1\">\r\n                    <div class=\"skills\">\r\n                        <h1 class=\"header-text1\">My favorite <span class=\"green\">bricks:</span></h1>\r\n                        <div class=\"skill1name no-wrap\">\r\n                            <h3>Node.js</h3>\r\n                        </div>\r\n                        <div class=\"skill1bar\">\r\n                            <div class=\"percentbar90\"></div>\r\n                        </div>\r\n                        <div class=\"skill1percentage \">\r\n                            <h3>90%</h3>\r\n                        </div>\r\n                        <div class=\"skill2name no-wrap\">\r\n                            <h3>Express</h3>\r\n                        </div>\r\n                        <div class=\"skill2bar\">\r\n                            <div class=\"percentbar80\"></div>\r\n                        </div>\r\n                        <div class=\"skill2percentage\">\r\n                            <h3>80%</h3>\r\n                        </div>\r\n                        <div class=\"skill3name no-wrap\">\r\n                            <h3>Database Design</h3>\r\n                        </div>\r\n                        <div class=\"skill3bar\">\r\n                            <div class=\"percentbar80\"></div>\r\n                        </div>\r\n                        <div class=\"skill3percentage\">\r\n                            <h3>80%</h3>\r\n                        </div>\r\n                        <div class=\"skill4name no-wrap\">\r\n                            <h3>HTML/CSS</h3>\r\n                        </div>\r\n                        <div class=\"skill4bar\">\r\n                            <div class=\"percentbar80\"></div>\r\n                        </div>\r\n                        <div class=\"skill4percentage\">\r\n                            <h3>80%</h3>\r\n                        </div>\r\n                        <div class=\"skill5name no-wrap\">\r\n                            <h3>Git</h3>\r\n                        </div>\r\n                        <div class=\"skill5bar\">\r\n                            <div class=\"percentbar80\"></div>\r\n                        </div>\r\n                        <div class=\"skill5percentage\">\r\n                            <h3>80%</h3>\r\n                        </div>\r\n                        <div class=\"skill6name no-wrap\">\r\n                            <h3>MySQL</h3>\r\n                        </div>\r\n                        <div class=\"skill6bar\">\r\n                            <div class=\"percentbar60\"></div>\r\n                        </div>\r\n                        <div class=\"skill6percentage\">\r\n                            <h3>60%</h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default Homepage;","import React, { Component } from 'react';\r\nimport singlelinelogo from '../public/images/Single-Line-Logo.png'\r\nclass Navbar extends Component {\r\n    render() {\r\n      return (\r\n        <div class=\"bar\">\r\n            <a href=\"/\" class=\"bar-item-main roboto-text-thin\">kylerdaybell.com</a>\r\n            <a href=\"/About\" class=\"bar-item roboto-text-thin\">About</a>\r\n            <a href=\"/Projects\" class=\"bar-item roboto-text-thin\">Projects</a>\r\n            <a href=\"/Examples\" class=\"bar-item roboto-text-thin\">Examples</a>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\n\r\n\r\nclass Notfound extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>The page you are looking for does not exist</h1>\r\n            </div>\r\n          );\r\n    }\r\n}\r\nexport default Notfound;","import React from 'react';\nimport { Route, Switch } from \"react-router\";\nimport Homepage from './components/home';\nimport Navbar from './components/navbar';\nimport Notfound from './components/notfound'\nimport './public/css/App.css';\n\n\nfunction App() {\n  return (\n    <>\n    <Navbar/>\n    <div className=\"container\">\n      <Switch>\n        <Route exact path=\"/\" component={Homepage} />\n        <Route path=\"/404\" component={Notfound} />\n        <Route component={Notfound} />\n      </Switch>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './public/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}