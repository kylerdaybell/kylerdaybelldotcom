(this["webpackJsonpkyler-daybell-portfolio"]=this["webpackJsonpkyler-daybell-portfolio"]||[]).push([[0],[,,,,,,,,,,,function(e,a,t){},function(e,a,t){},,,,function(e,a,t){e.exports=t.p+"static/media/NodeLogo.74f3cbcd.png"},function(e,a,t){e.exports=t.p+"static/media/MySQLLogo.af25e683.png"},,,,,,function(e,a,t){e.exports=t.p+"static/media/ExpressLogo.fe9713b4.png"},function(e,a,t){e.exports=t.p+"static/media/ReactLogo.47ce6e77.png"},function(e,a,t){e.exports=t.p+"static/media/JestLogo.450c112d.png"},,,function(e,a,t){e.exports=t.p+"static/media/Buildingnumber2.cb9260b5.jpg"},function(e,a,t){e.exports=t(49)},,,,,function(e,a,t){},function(e,a,t){e.exports=t.p+"static/media/logo.665e1249.png"},function(e,a,t){e.exports=t.p+"static/media/Group.2184ecc0.jpg"},function(e,a,t){},function(e,a,t){},function(e,a,t){},,,,,,function(e,a,t){},function(e,a,t){e.exports=t.p+"static/media/Single-Line-Logo.9a490b45.png"},function(e,a,t){},function(e,a,t){},function(e,a,t){"use strict";t.r(a);var n=t(0),r=t.n(n),c=t(22),s=t.n(c),i=t(7),l=(t(34),t(5)),o=t(1),p=t(2),m=t(3),d=t(4),u=(t(35),t(36),t(37),function(e){Object(d.a)(t,e);var a=Object(m.a)(t);function t(){return Object(o.a)(this,t),a.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"section1"},r.a.createElement("h1",{className:"header-text"},r.a.createElement("span",{className:"green"}," Code"),"is the coolest set of",r.a.createElement("span",{className:"green"},"[LEGOS]"),".")),r.a.createElement("div",{className:"section2"},r.a.createElement("h1",{className:"header-text"},"A beautiful tool that allows us to build",r.a.createElement("span",{className:"green"},"anything"),"we can imagine.")),r.a.createElement("div",{className:"section3 image-header1"},r.a.createElement("div",{className:"skills"},r.a.createElement("h1",{className:"header-text1"},"My favorite ",r.a.createElement("span",{className:"green"},"bricks:")),r.a.createElement("div",{className:"skill1name no-wrap"},r.a.createElement("h3",null,"Node.js")),r.a.createElement("div",{className:"skill1bar"},r.a.createElement("div",{className:"percentbar90"})),r.a.createElement("div",{className:"skill1percentage "},r.a.createElement("h3",null,"90%")),r.a.createElement("div",{className:"skill2name no-wrap"},r.a.createElement("h3",null,"Express")),r.a.createElement("div",{className:"skill2bar"},r.a.createElement("div",{className:"percentbar80"})),r.a.createElement("div",{className:"skill2percentage"},r.a.createElement("h3",null,"80%")),r.a.createElement("div",{className:"skill3name no-wrap"},r.a.createElement("h3",null,"Database Design")),r.a.createElement("div",{className:"skill3bar"},r.a.createElement("div",{className:"percentbar80"})),r.a.createElement("div",{className:"skill3percentage"},r.a.createElement("h3",null,"80%")),r.a.createElement("div",{className:"skill4name no-wrap"},r.a.createElement("h3",null,"HTML/CSS")),r.a.createElement("div",{className:"skill4bar"},r.a.createElement("div",{className:"percentbar80"})),r.a.createElement("div",{className:"skill4percentage"},r.a.createElement("h3",null,"80%")),r.a.createElement("div",{className:"skill5name no-wrap"},r.a.createElement("h3",null,"Git")),r.a.createElement("div",{className:"skill5bar"},r.a.createElement("div",{className:"percentbar80"})),r.a.createElement("div",{className:"skill5percentage"},r.a.createElement("h3",null,"80%")),r.a.createElement("div",{className:"skill6name no-wrap"},r.a.createElement("h3",null,"MySQL")),r.a.createElement("div",{className:"skill6bar"},r.a.createElement("div",{className:"percentbar60"})),r.a.createElement("div",{className:"skill6percentage"},r.a.createElement("h3",null,"60%")))))}}]),t}(n.Component)),E=(t(38),function(e){Object(d.a)(t,e);var a=Object(m.a)(t);function t(){return Object(o.a)(this,t),a.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"section1 header"},r.a.createElement("h1",{className:"header"},"Hi I'm ",r.a.createElement("span",{className:"green"},"Kyler Daybell"),"."),r.a.createElement("div",{className:"roboto-text-thin header-padding"},r.a.createElement("p",{className:"roboto-text-thin header-padding"},"I love working with ",r.a.createElement("span",{className:"green"},"code")," and building amazing new things."),r.a.createElement("p",{className:"roboto-text-thin header-padding"},"I am a ",r.a.createElement("span",{className:"green"},"full stack developer")," with an emphasis on ",r.a.createElement("span",{className:"green"},"back end")," and ",r.a.createElement("span",{className:"green"},"API's.")),r.a.createElement("p",{className:"roboto-text-thin header-padding"},"Most of my experience has been with ",r.a.createElement("span",{className:"green"},"Node.js")," and ",r.a.createElement("span",{className:"green"},"JavaScript.")),r.a.createElement("p",{className:"roboto-text-thin header-padding"},r.a.createElement("span",{className:"green"},"Database design")," and ",r.a.createElement("span",{className:"green"},"Database queries")," are my favorite things to work with."))),r.a.createElement("div",{className:"section2 image-header1"},r.a.createElement("div",{className:"skills"},r.a.createElement("h1",{className:"header header-text1"},"Skills"),r.a.createElement("div",{className:"skillname skill1name"},r.a.createElement("h3",null,"Node.js")),r.a.createElement("div",{className:"skillstars skill1stars"},r.a.createElement("h3",null,"\u2605 \u2605 \u2605 \u2605 \u2605")),r.a.createElement("div",{className:"skillname skill2name"},r.a.createElement("h3",null,"Express")),r.a.createElement("div",{className:"skillstars skill2stars"},r.a.createElement("h3",null,"\u2605 \u2605 \u2605 \u2605 \u2606")),r.a.createElement("div",{className:"skillname skill3name"},r.a.createElement("h3",null,"RESTful APIs")),r.a.createElement("div",{className:"skillstars skill3stars"},r.a.createElement("h3",null,"\u2605 \u2605 \u2605 \u2605 \u2606")),r.a.createElement("div",{className:"skillname skill4name"},r.a.createElement("h3",null,"SQL / Database Design")),r.a.createElement("div",{className:"skillstars skill4stars"},r.a.createElement("h3",null,"\u2605 \u2605 \u2605 \u2605 \u2606")),r.a.createElement("div",{className:"skillname skill5name"},r.a.createElement("h3",null,"Version control (Git)")),r.a.createElement("div",{className:"skillstars skill5stars"},r.a.createElement("h3",null,"\u2605 \u2605 \u2605 \u2605 \u2606")),r.a.createElement("div",{className:"skillname skill6name"},r.a.createElement("h3",null,"Typescript")),r.a.createElement("div",{className:"skillstars skill6stars"},r.a.createElement("h3",null,"\u2605 \u2605 \u2605 \u2606 \u2606")),r.a.createElement("div",{className:"skillname skill7name"},r.a.createElement("h3",null,"React Native")),r.a.createElement("div",{className:"skillstars skill7stars"},r.a.createElement("h3",null,"\u2605 \u2605 \u2605 \u2606 \u2606")),r.a.createElement("div",{className:"skillname skill8name"},r.a.createElement("h3",null,"Server Administration")),r.a.createElement("div",{className:"skillstars skill8stars"},r.a.createElement("h3",null,"\u2605 \u2605 \u2605 \u2606 \u2606")),r.a.createElement("div",{className:"skillname skill7name"},r.a.createElement("h3",null,"PHP")),r.a.createElement("div",{className:"skillstars skill7stars"},r.a.createElement("h3",null,"\u2605 \u2605 \u2605 \u2606 \u2606")),r.a.createElement("div",{className:"skillname skill8name"},r.a.createElement("h3",null,"Linux")),r.a.createElement("div",{className:"skillstars skill8stars"},r.a.createElement("h3",null,"\u2605 \u2605 \u2605 \u2606 \u2606")),r.a.createElement("div",{className:"skillname skill7name"},r.a.createElement("h3",null,"React")),r.a.createElement("div",{className:"skillstars skill7stars"},r.a.createElement("h3",null,"\u2605 \u2605 \u2605 \u2606 \u2606")),r.a.createElement("div",{className:"skillname skill8name"},r.a.createElement("h3",null,"Redux")),r.a.createElement("div",{className:"skillstars skill8stars"},r.a.createElement("h3",null,"\u2605 \u2605 \u2605 \u2606 \u2606")))),r.a.createElement("div",{className:"section3 image-header2"},r.a.createElement("div",{className:"work-experience "},r.a.createElement("h1",{className:"header "},"Work Experience"),r.a.createElement("div",{className:"work-experience header-padding "},r.a.createElement("h2",{className:"green "},"Software Engineer and I.T. Administrator"),r.a.createElement("h3",{className:""},"@ Dynamic Integrations"),r.a.createElement("p",{className:"small-text green "},"June 2019 - Current"),r.a.createElement("p",{className:"small-text "},"\u2022 Administering I.T. for 20+ small businesses.",r.a.createElement("br",null),"\u2022 Working with legacy code to make systems robust and testable.",r.a.createElement("br",null),"\u2022 Providing technical support to customers"),r.a.createElement("h2",{className:"green "},"Computer Science Tutor"),r.a.createElement("h3",{className:""},"@ Snow College Computer Science Department"),r.a.createElement("p",{className:"small-text green "},"June 2019 - Current"),r.a.createElement("p",{className:"small-text "},"\u2022 Assisting students during lab time and grading homework.",r.a.createElement("br",null),"\u2022 Helping students understand the fundamental constructs of programming."),r.a.createElement("h2",{className:"green "}," Captain, Training Officer"),r.a.createElement("h3",{className:""},"@ Fountain Green Fire Department"),r.a.createElement("p",{className:"small-text green "},"Volunteer August 2016 - Current"),r.a.createElement("p",{className:"small-text "},"\u2022 Training Volunteer firefighters to reach professional standards.",r.a.createElement("br",null),"\u2022 Protecting community's from fires and other natural disasters.")))),r.a.createElement("div",{className:"section4 image-header4"},r.a.createElement("div",{className:"education "},r.a.createElement("h1",{className:"header "},"Education"),r.a.createElement("div",{className:"work-experience header-padding "},r.a.createElement("h2",{className:"green "},"B.S. Software Engineering"),r.a.createElement("h3",{className:""},"Snow College"),r.a.createElement("p",{className:"small-text green "},"Emphasis in web development"),r.a.createElement("p",{className:"small-text green "},"August 2018 - May 2020"),r.a.createElement("h2",{className:"green "},"Associates of Pre-Engineering"),r.a.createElement("h3",{className:""},"Snow College "),r.a.createElement("p",{className:"small-text green "},"August 2015 - May 2018"),r.a.createElement("p",{className:"small-text green "},"Emphasis in software engineering")))),r.a.createElement("div",{className:"section5 image-header3"},r.a.createElement("div",{className:"image-header3-content"},r.a.createElement("h1",{className:"header"},r.a.createElement("span",{className:"green"},"Documents")),r.a.createElement("center",null,r.a.createElement("h1",null,r.a.createElement("a",{href:"/PUBLIC/KylerDaybellResume.pdf",className:"button",download:!0},"Resume download"))))))}}]),t}(n.Component)),h=(t(39),t(16)),g=t.n(h),R=t(23),y=t.n(R),I=t(24),N=t.n(I),v=t(25),b=t.n(v),f=t(17),D=t.n(f),w=function(e){Object(d.a)(t,e);var a=Object(m.a)(t);function t(){return Object(o.a)(this,t),a.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"node-example"},r.a.createElement(i.b,{className:"bar-item roboto-text-thin",to:"/NodeController"},r.a.createElement("div",{className:"card"},r.a.createElement("img",{className:"card-logo",src:g.a}),r.a.createElement("h1",{className:"no-wrap-ellipsis"},"Node Controller"))),r.a.createElement(i.b,{className:"bar-item roboto-text-thin",to:"/NodeService"},r.a.createElement("div",{className:"card"},r.a.createElement("img",{className:"card-logo",src:g.a}),r.a.createElement("h1",{className:"no-wrap-ellipsis"},"Node Services"))),r.a.createElement(i.b,{className:"bar-item roboto-text-thin",to:"/Express"},r.a.createElement("div",{className:"card"},r.a.createElement("img",{className:"card-logo",src:y.a}),r.a.createElement("h1",{className:"no-wrap-ellipsis"},"Express"))),r.a.createElement(i.b,{className:"bar-item roboto-text-thin",to:"/react"},r.a.createElement("div",{className:"card"},r.a.createElement("img",{className:"card-logo",src:N.a}),r.a.createElement("h1",{className:"no-wrap-ellipsis"},"React"))),r.a.createElement(i.b,{className:"bar-item roboto-text-thin",to:"/Jest"},r.a.createElement("div",{className:"card"},r.a.createElement("img",{className:"card-logo",src:b.a}),r.a.createElement("h1",{className:"no-wrap-ellipsis"},"Jest testing"))),r.a.createElement(i.b,{className:"bar-item roboto-text-thin",to:"/NodeMysql"},r.a.createElement("div",{className:"card"},r.a.createElement("img",{className:"card-logo",src:D.a}),r.a.createElement("h1",{className:"no-wrap-ellipsis"},"MySQL2 Parameterized SQL"))),r.a.createElement(i.b,{className:"bar-item roboto-text-thin",to:"/Mysql"},r.a.createElement("div",{className:"card"},r.a.createElement("img",{className:"card-logo",src:D.a}),r.a.createElement("h1",{className:"no-wrap-ellipsis"},"MySQL")))))}}]),t}(n.Component),S=(t(45),t(28)),C=t.n(S),T=function(e){Object(d.a)(t,e);var a=Object(m.a)(t);function t(){return Object(o.a)(this,t),a.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"top header-text header"},r.a.createElement("img",{className:"header-image",src:C.a}),r.a.createElement("div",{className:"titleheader"},r.a.createElement("h1",null,r.a.createElement("span",{className:" green header thick"},"Projects")))),r.a.createElement("div",{className:"project-holder1"},r.a.createElement("div",{className:"project"},r.a.createElement("div",null,r.a.createElement("h1",null,r.a.createElement("span",{className:"green  thick "},"Project GreenBean"))),r.a.createElement("div",null,r.a.createElement("h2",{className:"green "},"Project description:"),r.a.createElement("h3",null,"The goal of the project was to create a desktop application that could be installed on desktop computers that would allow users to create recipes and search for them based on ingredients they had at home.")),r.a.createElement("div",null,r.a.createElement("h2",{className:"green"},"contributors:"),r.a.createElement("h3",null,r.a.createElement("span",{className:"green"},"Kyler Daybell")," - database architect and backend API developer"),r.a.createElement("h4",null,r.a.createElement("span",{className:"green"},"Brandon Isbell")," - Front end API interaction systems architect"),r.a.createElement("h4",null,r.a.createElement("span",{className:"green"},"Mike Vance")," - Front end and design architect")),r.a.createElement("div",null,r.a.createElement("h2",{className:"green"},"Technology stack:"),r.a.createElement("h4",null,r.a.createElement("span",{className:"green"},"API: "),"RESTful, Node.js, Express, Jest, MySQL, HTTPS, LetsEncrypt , GitHub build Pipelines "),r.a.createElement("h4",null,r.a.createElement("span",{className:"green"},"Desktop Application:")," React, Redux, Electron, Jest, HTML, CSS")),r.a.createElement("div",null,r.a.createElement("h2",{className:"green"},"Outcomes:"),r.a.createElement("h3",null,"This project was largely successful, our team was able to deliver a fully working, tested, and user friendly Our project was delivered on time. Our team was able to deliver an application that had lot of potential for easy growth based off of it api based nature. Due to the UX based front end focus our user experience was very good.")),r.a.createElement("div",null,r.a.createElement("h2",{className:"green"},"Lessons Learned:"),r.a.createElement("h3",null,"I learned a lot about making architecture decisions, The api based architecture and quality documentation means that the business logic of this application can be easily deployed and reused in other application formats such as web and mobile. Building the api in a MVC architecture with dependency injection made it really easy to change and add new features. I also learned a ton about the value of teamwork, proper task delegation, and reaching out to others for help."),r.a.createElement("a",{href:"https://github.com/kylerdaybell/Project_GreenBean",className:"button-green"},"View on GitHub")))),r.a.createElement("div",{className:"project-holder2"},r.a.createElement("div",{className:"project"},r.a.createElement("div",null,r.a.createElement("h1",null,r.a.createElement("span",{className:"green  thick "},"Sahara Schedule"))),r.a.createElement("div",null,r.a.createElement("h2",{className:"green "},"Project description:"),r.a.createElement("h3",null,"the goal was to create a school scheduling app that was more tailored to students.")),r.a.createElement("div",null,r.a.createElement("h2",{className:"green"},"contributors:"),r.a.createElement("h3",null,r.a.createElement("span",{className:"green"},"Kyler Daybell")," - Solo fullstack developer")),r.a.createElement("div",null,r.a.createElement("h2",{className:"green"},"Technology stack:"),r.a.createElement("h3",null,r.a.createElement("span",{className:"green"},"Website: ")," Node.js, Express, EJS, Jest, MySQL, MVC")),r.a.createElement("div",null,r.a.createElement("h2",{className:"green"},"Outcomes:"),r.a.createElement("h3",null,"This project was not completed due to other projects but the stack and integration of the stack was successful. The project was also a great learning experience.")),r.a.createElement("div",null,r.a.createElement("h2",{className:"green"},"Lessons Learned:"),r.a.createElement("h3",null,"This was my first attempt at a MVC structured application using Node.js and express. This was my first time using TDD or any kind of automated testing within javascript. I learned the value of TDD and automated testing within javascript when I was refactoring code. I learned one way to inject dependency's into services to alow for testing and mocking other services. I learned a lot about MVC structure EJS as a templating framework to present users with clean and consistent views.")),r.a.createElement("a",{href:"https://github.com/kylerdaybell/project_Sahara",className:"button-green"},"View on GitHub"))),r.a.createElement("div",{className:"project-holder1"},r.a.createElement("div",{className:"project"},r.a.createElement("div",null,r.a.createElement("h1",null,r.a.createElement("span",{className:"green header"},"Project WhiteShirt"))),r.a.createElement("div",null,r.a.createElement("h2",{className:"green"},"Project description:"),r.a.createElement("h3",null,"To create a video sharing platform with user accounts, custom generated views, and viewing history.")),r.a.createElement("div",null,r.a.createElement("h2",null,r.a.createElement("span",{className:"green"},"Project Duration:")," 6 months")),r.a.createElement("div",null,r.a.createElement("h2",{className:"green"},"contributors:"),r.a.createElement("h3",null,r.a.createElement("span",{className:"green"},"Kyler Daybell")," - fullstack developer"),r.a.createElement("h3",null,r.a.createElement("span",{className:"green"},"Mike Vance")," - Front end and design")),r.a.createElement("div",null,r.a.createElement("h2",{className:"green"},"Technology stack:"),r.a.createElement("h3",null,r.a.createElement("span",{className:"green"},"Website: ")," Node.js, Express, MySQL, NodeMailer")),r.a.createElement("div",null,r.a.createElement("h2",{className:"green"},"Outcomes:"),r.a.createElement("h3",null,"This project was completed but was largely a failure due to inexperience in architecture with web applications. The final code was insecure and extremely hard to change. the project was monolithic with html being rendering in the same function as the database calls. The project did have some added features such as email validation via email. file and video storage with database links. password hashing before storage.")),r.a.createElement("div",null,r.a.createElement("h2",{className:"green"},"Lessons Learned:"),r.a.createElement("h3",null,"This was my first attempt at writing server side code. in doing so, I spent a lot of the time learning about the first way I could find to do things instead of doing them the right way. However in doing this I learned a lot about the wrong way of doing things and because I understood how frustrating doing things the wrong way can be I was very impressed when I later learned about MVC structuring. Due to the security issues the project was removed from github.")))))}}]),t}(n.Component),O=(t(11),t(12),function(e){Object(d.a)(t,e);var a=Object(m.a)(t);function t(){return Object(o.a)(this,t),a.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("h1",{className:"header"},"Jest testing framework"),r.a.createElement("div",{className:"page-text"},r.a.createElement("p",null,"This jest testing framework, shows a category database service under test. jest allows the first parameter of the test function to be the name of the test, this allows spaces to be in the name of the test this allows tests to be better defined and more readable. Note that the service uses dependency injection to mock database calls the service makes.")),r.a.createElement("pre",{className:"code language-jsx"},"\n            var SaharaTestService = require('../services/SaharaTestService');\n            var CategoryDatabaseService = require('../services/CategoryService');\n            CategoryDatabaseService.constructor(SaharaTestService);\n            \n            test('Given a valid username and the user has created a category before the category model should return at least one category',async ()=>{\n                let categories = await CategoryDatabaseService.getAllCategories('kyler');\n                expect(categories.length).toBeGreaterThan(0);\n            })\n            \n            test('Given an invalid username the Category Model should return an empty list',async ()=>{\n                let categories = await CategoryDatabaseService.getAllCategories('bob');\n                expect(categories.length).toBeLessThanOrEqual(0);\n            })\n            \n            test('Given a user is logged in that user can add catagories to the database',async ()=>{\n                let WasCategoryAdded = await CategoryDatabaseService.addNewCategory('username','category name','category description','color');\n                expect(WasCategoryAdded).toBe(true);\n            })\n            \n            test('givin a valid category id a user who owns that category can edit and update it',async ()=>{\n                let WasCategoryEdited = await CategoryDatabaseService.updateCategory('kyler',1,'category name','category description','color');\n                expect(WasCategoryEdited).toBe(true);\n            })\n            \n            //this is a broken test we should really expect false\n            test('givin an invalid category id a user who owns that category can not edit and update it',async ()=>{\n                let WasCategoryEdited = await CategoryDatabaseService.updateCategory('bob',5,'category name','category description','color');\n                expect(WasCategoryEdited).toBe(false);\n            })\n            \n            test('givin a valid username the user can delete a category',async ()=>{\n                let WasCategoryEdited = await CategoryDatabaseService.removeCategory('kyler',1);\n                expect(WasCategoryEdited).toBe(true);\n            })"))}}]),t}(n.Component)),A=function(e){Object(d.a)(t,e);var a=Object(m.a)(t);function t(){return Object(o.a)(this,t),a.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("h1",{className:"header"},"MySQL database"),r.a.createElement("pre",{className:"code language-plsql"},"\n                    DROP DATABASE greenbeans;\n                    create DATABASE greenbeans;\n                    USE greenbeans;\n\n                    CREATE TABLE USER(\n                        ID int NOT NULL AUTO_INCREMENT,\n                        EMAIL varchar(255) NOT NULL,\n                        PASSWORD varchar(255) NOT NULL,\n                        ROLE varchar(2555) NOT NULL,\n                        PRIMARY KEY (ID),\n                        UNIQUE KEY unique_email (EMAIL)\n                    );\n\n                    CREATE TABLE RECIPE(\n                        ID int NOT NULL AUTO_INCREMENT,\n                        USER_ID int NOT NULL,\n                        NAME varchar(255) NOT NULL,\n                        DESCRIPTION varchar(5500) NOT NULL,\n                        PICTURE varchar(255),\n                        PREP_TIME TIME,\n                        COOK_TIME TIME,\n                        INSTRUCTIONS varchar(5500) NOT NULL,\n                        CATEGORY varchar(255),\n                        FOREIGN KEY (USER_ID) REFERENCES USER(ID),\n                        PRIMARY KEY (ID)\n                    );\n                    \n                    CREATE UNIQUE INDEX userid_recipename\n                    ON RECIPE (USER_ID,NAME);\n\n                    CREATE TABLE INGREDIENT(\n                        ID int NOT NULL AUTO_INCREMENT,\n                        NAME varchar(255) NOT NULL,\n                        PRIMARY KEY(ID),\n                        UNIQUE KEY unique_ingredient_name (NAME)\n                    );\n\n                    CREATE TABLE RECIPETOINGREDIENT(\n                        ID int NOT NULL AUTO_INCREMENT,\n                        RECIPE_ID int NOT NULL,\n                        INGREDIENT_ID int NOT NULL,\n                        AMOUNT float NOT NULL,\n                        UNIT varchar(255) NOT NULL,\n                        FOREIGN KEY (RECIPE_ID) REFERENCES RECIPE(ID),\n                        FOREIGN KEY (INGREDIENT_ID) REFERENCES INGREDIENT(ID),\n                        PRIMARY KEY (ID)\n                    );\n\n                    CREATE UNIQUE INDEX duplicaterecipetoingredients\n                    ON RECIPETOINGREDIENT (RECIPE_ID,INGREDIENT_ID);\n                    "))}}]),t}(n.Component),k=function(e){Object(d.a)(t,e);var a=Object(m.a)(t);function t(){return Object(o.a)(this,t),a.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("h1",{class:"header"},"Node Api Controller"),r.a.createElement("div",{class:"page-text"},r.a.createElement("p",null,"This controller was written to manage full CRUD of recipes, as well as search methods for recipes. The goal of the controller in this project was to be small and simple. It is at the top of the abstraction tree. It does not directly touch the database or any of the file system, Instead it lets the services do this and only constructs models and passes them to the services. It should be noted that this controller is the controller of an api.")),r.a.createElement("pre",{class:"code language-jsx"},"\n            var RecipeService = require('../services/RecipeService.js');\n            var UserService = require('../services/UserService.js');\n            var IngredientService = require('../services/IngredientService')\n            var ApiDatabaseService = require('../services/ApiDatabaseService.js');\n            var ImageService = require(\"../services/ImageService\")\n            var Recipe = require('../models/RecipeModel.js');\n            var User = require('../models/UserModel.js');\n            var ImageService = require(\"../services/ImageService\")\n            const BaseURL = process.env.URL;\n\n            UserService.constructor(ApiDatabaseService);\n            IngredientService.constructor(ApiDatabaseService);\n            RecipeService.constructor(ApiDatabaseService, UserService,IngredientService);\n\n            var RecipeController = {\n                PostCreateRecipe: async function(req, res){\n                    var ImageUrl = BaseURL + \"/images/DefaultImage.jpg\";\n                    ImageUrl = await ImageService.Convert64BitToImageUrl(req.body.picture);\n                    var recipe = new Recipe(null, null, req.body.name, req.body.descr, ImageUrl, req.body.preptime, \n                        req.body.cooktime, req.body.category,req.body.instructions, req.body.ingredientslist);\n                    var user = new User(req.body.email, req.body.password, null);\n                    if (await RecipeService.CreateRecipe(recipe, user)){\n                        res.write(JSON.stringify(\"Result: Success\"));\n                        res.end();\n                    }\n                    else{\n                        res.write(JSON.stringify(\"Result: Failure\"));\n                        res.end();\n                    }\n                },\n                GetRecipeById:async function(req,res){\n                    var RecipeID = req.params.id;\n                    var Recipe = await RecipeService.GetRecipeById(RecipeID);\n                    res.write(JSON.stringify(Recipe));\n                    res.end();\n                },\n                GetAllRecipes:async function(req,res){\n                    var RecipeList = await RecipeService.GetAllRecipes();\n                    res.write(JSON.stringify(RecipeList));\n                    res.end();\n                },\n                SearchRecipeByName: async function(req,res){\n                    var RecipeName = req.params.name;\n                    var RecipeList = await RecipeService.SearchRecipeByName(RecipeName);\n                    res.write(JSON.stringify(RecipeList));\n                    res.end();\n                },\n                UpdateRecipe: async function(req,res){\n                    var recipe = new Recipe(req.body.id, null, req.body.name, req.body.descr, req.body.picture, req.body.preptime, \n                        req.body.cooktime, req.body.category,req.body.instructions, req.body.ingredientslist);\n                    var user = new User(req.body.email, req.body.password, null);\n                    if (await RecipeService.UpdateRecipe(recipe, user)){\n                        console.log(recipe)\n                        res.write(JSON.stringify(\"Result: Success\"));\n                        res.end();\n                    }\n                    else{\n                        res.write(JSON.stringify(\"Result: Failure\"));\n                        res.end();\n                    }\n                },\n                DeleteRecipe: async function(req,res){\n                    var recipe = new Recipe(req.body.id);\n                    var user = new User(req.body.email, req.body.password, null);\n                    if (await RecipeService.DeleteRecipe(recipe, user)){\n                        res.write(JSON.stringify(\"Result: Success\"));\n                        res.end();\n                    }\n                    else{\n                        res.write(JSON.stringify(\"Result: Failure\"));\n                        res.end();\n                    }\n                },\n                GetRecipeByIngredientsList: async function(req,res){\n                    let IngredientsList = req.body.IngredientsList;\n                    var RecipeMatch = await RecipeService.SearchRecipesByIngredients(IngredientsList);\n                    res.write(JSON.stringify(RecipeMatch));\n                    res.end();\n                },\n                GetRecipeByCategory: async function(req,res){\n                    let category = req.params.category;\n                    let RecipeMatch = await RecipeService.GetRecipesByCategory(category);\n                    res.write(JSON.stringify(RecipeMatch));\n                    res.end();\n                },\n                GetRecipeByEmail:async function(req,res){\n                    let email = req.params.email;\n                    let RecipeMatch = await RecipeService.GetRecipesByEmail(email);\n                    res.write(JSON.stringify(RecipeMatch));\n                    res.end();\n                },\n                GetTopTenRecipes: async function(req,res){\n                    var RecipeList = await RecipeService.GetTopTenRecipes();\n                    res.write(JSON.stringify(RecipeList));\n                    res.end();\n                },\n                GetRecipeAdvancedSearch: async function(req, res) {\n                    let IngredientsList = req.body.IngredientsList;\n                    let category = req.body.category;\n                    let email = req.body.email;\n                    let RecipeMatch = [];\n                    if(typeof IngredientsList !== 'undefined'){\n                        RecipeMatch = await RecipeService.SearchRecipesByIngredients(IngredientsList)\n                    }else if(typeof category !== 'undefined'){\n                        RecipeMatch = await RecipeService.GetRecipesByCategory(category);\n                    }else if(typeof email !== 'undefined'){\n                        RecipeMatch = await RecipeService.GetRecipesByEmail(email);\n                    }\n                    res.write(JSON.stringify(RecipeMatch));\n                    res.end();\n                }\n            }\n\n            module.exports = RecipeController;\n                    "))}}]),t}(n.Component),L=function(e){Object(d.a)(t,e);var a=Object(m.a)(t);function t(){return Object(o.a)(this,t),a.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("h1",{class:"header"},"Node Service"),r.a.createElement("div",{class:"page-text"},r.a.createElement("p",null,"This is the recipe service, it uses dependency injection to allow for testing. the service also uses clean code abstraction techniques. This means that the functions towards the top of the file depend on the functions towards the bottom, this means that the functions remain small, readable, and at a consistent level of abstraction.")),r.a.createElement("pre",{class:"code language-jsx"},'\n                        var IApiDatabaseService;\n                        var User = require(\'../models/UserModel.js\');\n                        var Recipe = require(\'../models/RecipeModel.js\');\n                        var RecipeMatch = require(\'../models/RecipeMatchModel.js\');\n                        var IIngredientService;\n                        var IUserService;\n\n                        var RecipeService = {\n                            constructor: function(IApiDatabaseServiceInsert, IUserServiceInsert,IIngredientServiceInsert){\n                                IIngredientService = IIngredientServiceInsert;\n                                IApiDatabaseService = IApiDatabaseServiceInsert;\n                                IUserService = IUserServiceInsert;\n                            },\n                            CreateRecipe: async function(recipe, user){\n                                if (await IUserService.LoginUser(user)){\n                                    recipe.userid = await IUserService.GetUserID(user);\n                                    if(recipe.userid != 0){\n                                        if(await this.CheckDuplicate(recipe)){\n                                            var recipeID = await this.AddRecipe(recipe);\n                                            if(recipeID != 0){\n                                                recipe.id = recipeID;\n                                                await IIngredientService.AddIngredients(recipe);\n                                                return true;\n                                            }else{\n                                                return false\n                                            }\n                                        }else{\n                                            return false;\n                                        }\n                                    }else{\n                                        return false;\n                                    }           \n                                }\n                                else{\n                                    return false;\n                                }\n                            },\n                            GetTopTenRecipes: async function(){\n                                let DatabaseResult = await IApiDatabaseService.GetTopTenRecipes();\n                                var RecipeList = this.DatabaseResultToRecipeList(DatabaseResult)\n                                return RecipeList;\n                            },\n                            GetAllRecipes: async function(){\n                                let DatabaseResult = await IApiDatabaseService.GetAllRecipes();\n                                var RecipeList = this.DatabaseResultToRecipeList(DatabaseResult)\n                                return RecipeList;\n                            },\n                            GetRecipeById: async function(RecipeID){\n                                let DatabaseResult = await IApiDatabaseService.GetRecipeByID(RecipeID);\n                                if(typeof DatabaseResult[0][0] != \'undefined\'){\n                                    var recipe = await this.DatabaseResultToRecipe(DatabaseResult[0][0]);\n                                }else{\n                                    var recipe = new Recipe();\n                                }\n                                return recipe; \n                            },    \n                            GetRecipesByCategory: async function(category){\n                                let DatabaseResult = await IApiDatabaseService.SearchRecipeByCategory(category);\n                                var RecipeList = this.DatabaseResultToRecipeList(DatabaseResult)\n                                return RecipeList;\n                            },\n                            SearchRecipeByName: async function(RecipeName){\n                                let DatabaseResult = await IApiDatabaseService.SearchRecipeByName(RecipeName);\n                                var RecipeList = this.DatabaseResultToRecipeList(DatabaseResult)\n                                return RecipeList;\n                            },\n                            GetRecipesByEmail: async function(email){\n                                let DatabaseResult = await IApiDatabaseService.SearchRecipeByEmail(email);\n                                var RecipeList = this.DatabaseResultToRecipeList(DatabaseResult)\n                                return RecipeList;\n                            },\n                            SearchRecipesByIngredients: async function(IngredientsList){\n                                let ListOfAllMatchingRecipes = [];\n                                for(let i = 0;i < IngredientsList.length;i++){\n                                    let Ingredient = IngredientsList[i]\n                                    ListOfAllMatchingRecipes = await this.SearchRecipeBySingleIngredient(ListOfAllMatchingRecipes,Ingredient)\n                                }\n                                let RecipeAndMatchesDictionary = await this.MapRecipesToNumberOfIngredientMatches(ListOfAllMatchingRecipes)\n                                let RecipeByPercentMatch = await this.GetRecipesPercentMatch(RecipeAndMatchesDictionary);   \n                                let CompletedRecipeSearchList = await this.AssembleRecipeAndPercentMatch(RecipeByPercentMatch);\n                                return CompletedRecipeSearchList;\n\n                            },\n                            UpdateRecipe: async function(Recipe,User){\n                                if (await IUserService.LoginUser(User)){\n                                    UserID = await IUserService.GetUserID(User)\n                                    DatabaseResult = await IApiDatabaseService.GetRecipeByID(Recipe.id)\n                                    if(typeof DatabaseResult[0][0] != \'undefined\'){\n                                        Recipe.userid = DatabaseResult[0][0]["USER_ID"];\n                                        if(UserID == Recipe.userid){\n                                            await IApiDatabaseService.DeleteRecipeToIngredientByRecipeID(Recipe.id);\n                                            await IIngredientService.AddIngredients(Recipe);\n                                            await IApiDatabaseService.UpdateRecipe(Recipe);\n                                            return true;\n                                        }\n                                    }\n\n                                }\n                                return false;\n                            },\n                            AddRecipe: async function(recipe){\n                                let DatabaseResult = await IApiDatabaseService.GetRecipeID(recipe);\n                                if(typeof DatabaseResult[0][0] != "undefined"){\n                                    return DatabaseResult[0][0]["ID"];\n                                }else{\n                                    await IApiDatabaseService.AddRecipe(recipe);\n                                    DatabaseResult = await IApiDatabaseService.GetRecipeID(recipe);\n                                    let recipeid = DatabaseResult[0][0]["ID"];\n                                    if(typeof recipeid != \'undefined\'){\n                                        return recipeid; \n                                    }else{\n                                        return 0;\n                                    }\n                                }\n                            },\n                            CheckDuplicate: async function(recipe){\n                                let DatabaseResult = await IApiDatabaseService.GetRecipeByUsernameAndRecipename(recipe.name,recipe.userid);\n                                if(typeof DatabaseResult[0][0]!== \'undefined\'){\n                                    return false;\n                                }\n                                return true;\n                            },\n                            SearchRecipeBySingleIngredient: async function(ListOfAllMatchingRecipes,Ingredient){ \n                                let DatabaseResult = await IApiDatabaseService.SearchRecipeByIngredient(Ingredient.name);\n                                    if(typeof DatabaseResult[0]!= \'undefined\'){\n                                        for(let j = 0;  j <  DatabaseResult[0].length; j++){\n                                            ListOfAllMatchingRecipes.push(DatabaseResult[0][j]["ID"]);\n                                        }\n                                    }\n                                return ListOfAllMatchingRecipes;\n                            },\n                            MapRecipesToNumberOfIngredientMatches: async function(ListOfAllMatchingRecipes){\n                                var RecipeAndMatchesDictionary = {}\n                                for(let i = 0;i < ListOfAllMatchingRecipes.length;i++){\n                                    if(typeof RecipeAndMatchesDictionary[ListOfAllMatchingRecipes[i]] == \'undefined\'){\n                                        RecipeAndMatchesDictionary[ListOfAllMatchingRecipes[i]] = 1\n                                    }else{\n                                        RecipeAndMatchesDictionary[ListOfAllMatchingRecipes[i]] =  RecipeAndMatchesDictionary[ListOfAllMatchingRecipes[i]]+1\n                                    }\n                                }\n                                return RecipeAndMatchesDictionary\n                            },\n                            AssembleRecipeAndPercentMatch: async function(RecipeByPercentMatch){\n                                let CompletedRecipeSearchList = []\n                                for(var key in RecipeByPercentMatch){\n                                    let recipe = await this.GetRecipeById(key);\n                                    let recipematch = new RecipeMatch(recipe,RecipeByPercentMatch[key]);\n                                    CompletedRecipeSearchList.push(recipematch);\n                                }\n                                return CompletedRecipeSearchList;\n                            },\n                            GetRecipesPercentMatch: async function(RecipeAndMatchesDictionary){\n                                let RecipePercentMatchDictionary = {}\n                                for(var key in RecipeAndMatchesDictionary){\n                                    let NumberOfTotalIngredients = await this.GetNumberOfIngredientsByRecipeId(key);\n                                    let NumberOfMatchingIngredients = RecipeAndMatchesDictionary[key];\n                                    let PercentMatch = (NumberOfMatchingIngredients/NumberOfTotalIngredients)*100\n                                    RecipePercentMatchDictionary[key] = PercentMatch;\n                                }\n                                return RecipePercentMatchDictionary;\n                                \n                            },\n                            GetNumberOfIngredientsByRecipeId: async function(RecipeID){\n                                let DatabaseResult = await IApiDatabaseService.GetNumberOfIngredientsByRecipeId(RecipeID);\n                                if(typeof DatabaseResult[0][0] != \'undefined\'){\n                                    return DatabaseResult[0][0]["count(*)"]\n                                }else{\n                                    return 0;\n                                }\n                            },\n                            DeleteRecipe: async function(Recipe,User){\n                                if (await IUserService.LoginUser(User)){\n                                    UserID = await IUserService.GetUserID(User)\n                                    DatabaseResult = await IApiDatabaseService.GetRecipeByID(Recipe.id)\n                                    if(typeof DatabaseResult[0][0] != \'undefined\'){\n                                        Recipe.userid = DatabaseResult[0][0]["USER_ID"];\n                                        if(UserID == Recipe.userid){\n                                            await IApiDatabaseService.DeleteRecipeToIngredientByRecipeID(Recipe.id);\n                                            await IApiDatabaseService.DeleteRecipeByID(Recipe.id);\n                                            return true;\n                                        }\n                                    }\n\n                                }\n                                return false;\n                            },\n                            DatabaseResultToRecipeList: async function(DatabaseResultList){\n                                let RecipeList = []\n                                for(let i = 0; i < DatabaseResultList[0].length; i++){\n                                    let recipe = await this.DatabaseResultToRecipe(DatabaseResultList[0][i]);\n                                    var newrecipe = {"recipe":recipe};\n                                    RecipeList.push(newrecipe);\n                                }\n                                return RecipeList;\n                            },\n                            DatabaseResultToRecipe: async function(DatabaseResult){\n                                let recipe = new Recipe(DatabaseResult["ID"],DatabaseResult["USER_ID"],DatabaseResult["NAME"],DatabaseResult["DESCRIPTION"],\n                                DatabaseResult["PICTURE"],DatabaseResult["PREP_TIME"],DatabaseResult["COOK_TIME"],DatabaseResult["CATEGORY"],DatabaseResult["INSTRUCTIONS"]);\n                                recipe.ingredientslist = await IIngredientService.GetListOfIngredientsByRecipeID(recipe.id);\n                                return recipe;\n                            }\n                        }\n\n                        module.exports = RecipeService;\n                    '))}}]),t}(n.Component),M=function(e){Object(d.a)(t,e);var a=Object(m.a)(t);function t(){return Object(o.a)(this,t),a.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("h1",{class:"header"},"Express Routing"),r.a.createElement("div",{class:"page-text"},r.a.createElement("p",null,"This file demonstrates the routing of a recipe service api. This express features static file serving, https using letsencrypt, and controllers.")),r.a.createElement("pre",{class:"code language-jsx"},"\n                            var express = require('express');\n                            const fs = require('fs');\n                            var cors = require('cors');\n                            const https = require('https');\n                            var app = express();\n                            var whitelist = \"http:/144.17.24.16\";\n                            var userController = require('./controllers/UserController.js');\n                            var recipeController = require('./controllers/RecipeController.js');\n                            const bodyParser = require('body-parser');\n                            app.use(bodyParser.json({limit: '50mb', type: 'application/json'}));\n                            app.use('/images',express.static('Images'))\n                            global.__basedir = __dirname;\n                            const port = process.env.PORT || 80;\n\n                            if(process.env.NODE_ENV === \"development\"){\n                            app.listen(port, () => {\n                                console.log(\"Development Server running on port \"+port);\n                            });\n                            }else {\n                            const privateKey = fs.readFileSync('/etc/letsencrypt/live/api.greenbeancooking.com/privkey.pem', 'utf8');\n                            const certificate = fs.readFileSync('/etc/letsencrypt/live/api.greenbeancooking.com/cert.pem', 'utf8');\n                            const ca = fs.readFileSync('/etc/letsencrypt/live/api.greenbeancooking.com/chain.pem', 'utf8');\n\n                            const credentials = {\n                                key: privateKey,\n                                cert: certificate,\n                                ca: ca\n                            };\n\n                            const httpsServer = https.createServer(credentials, app);\n\n                            httpsServer.listen(443, () => {\n                                console.log('HTTPS Server running on port 443');\n                            });\n                            }\n\n\n                            var corsOptions={\n                                origin:function(origin,callback){\n                                if(whitelist.indexOf(origin)===-1){\n                                    callback(null,true)\n                                }else{\n                                    console.log(\"blocked by cors\")\n                                    callback(new Error('not allowed by cors'))\n                                }\n                                }\n                            }\n\n\n                            //login area\n                            app.post('/register',cors(corsOptions),function(req,res){\n                                console.log(\"register\");\n                                userController.PostRegisterUser(req, res);\n                            });\n\n                            app.post('/login',cors(corsOptions),function(req,res){\n                            console.log(\"login\");\n                            userController.PostLoginUser(req, res);\n                            });\n\n                            //recipe controller area\n                            app.post('/createrecipe',cors(corsOptions),function(req,res){\n                            console.log(\"createrecipe\");\n                            recipeController.PostCreateRecipe(req, res);\n                            });\n\n                            app.get('/getrecipebyid/:id',cors(corsOptions),function(req,res){\n                            console.log(\"getrecipebyid\");\n                            recipeController.GetRecipeById(req,res);\n                            });\n\n                            app.get('/getallrecipes',cors(corsOptions),function(req,res){\n                            console.log(\"getallrecipes\");\n                            recipeController.GetAllRecipes(req,res);\n                            });\n\n                            app.get('/gettoptenrecipes',cors(corsOptions),function(req,res){\n                            console.log(\"gettoptenrecipes\");\n                            recipeController.GetTopTenRecipes(req,res);\n                            });\n\n\n\n                            app.get('/searchrecipebyname/:name',cors(corsOptions),function(req,res){\n                            console.log(\"searchrecipebyname\");\n                            recipeController.SearchRecipeByName(req,res);\n                            });\n\n                            app.post('/updaterecipe',cors(corsOptions),function(req,res){\n                            console.log(\"updaterecipe\");\n                            recipeController.UpdateRecipe(req,res);\n                            });\n\n                            app.post('/deleterecipe',cors(corsOptions),function(req,res){\n                            console.log(\"deleterecipe\");\n                            recipeController.DeleteRecipe(req,res);\n                            })\n\n                            app.post('/getrecipebyingredientslist',cors(corsOptions),function(req,res){\n                            console.log(\"/getrecipebyingredientslist\");\n                            recipeController.GetRecipeByIngredientsList(req,res);\n                            })\n\n                            app.get('/getrecipebycategory/:category',cors(corsOptions),function(req,res){\n                            console.log(\"/getrecipebycategory\");\n                            recipeController.GetRecipeByCategory(req,res);\n                            })\n\n                            app.get('/getrecipebyemail/:email',cors(corsOptions),function(req,res){\n                            console.log(\"/getrecipebyemail\");\n                            recipeController.GetRecipeByEmail(req,res);\n                            })\n\n                            app.post('/getRecipeAdvancedSearch',cors(corsOptions),function(req,res){\n                            console.log(\"/getRecipeAdvancedSearch\");\n                            recipeController.GetRecipeAdvancedSearch(req,res);\n                            })\n                    "))}}]),t}(n.Component),x=function(e){Object(d.a)(t,e);var a=Object(m.a)(t);function t(){return Object(o.a)(this,t),a.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("h1",{class:"header"},"MySQL2"),r.a.createElement("div",{class:"page-text"},r.a.createElement("p",null,"using paramiterized sql to access a mysql database")),r.a.createElement("pre",{class:"code language-jsx"},"\n                            require('dotenv').config();\n                            const DB_HOST = process.env.DB_HOST;\n                            const DB_USER = process.env.DB_USER;\n                            const DB_PASS = process.env.DB_PASS;\n                            const DB_DATA = process.env.DB_DATA;\n\n\n\n                            var mysql = require('mysql2/promise');\n\n                            var ApiDatabaseService = {\n                                getConnection: async function(){\n                                    const con = await mysql.createConnection({\n                                        host: DB_HOST,\n                                        user: DB_USER,\n                                        password: DB_PASS,\n                                        database: DB_DATA\n                                    });\n                                    return con;\n                                },\n                                GetUser: async function(email){\n                                    const con = await this.getConnection();\n                                    var [rows] = await con.execute('select * from USER WHERE EMAIL = ?', [email]);\n                                    con.end()\n                                    return rows;\n\n                                },\n                                RegisterUser: async function(user){\n                                    const con = await this.getConnection();\n                                    con.execute('INSERT INTO USER (EMAIL,PASSWORD,ROLE) VALUE (?,?,?)', [user.email, user.password, user.role]);\n                                    con.end()\n                                },\n                                AddRecipe: async function(recipe){\n                                    const con = await this.getConnection();\n                                    con.execute('INSERT INTO RECIPE(USER_ID,NAME,DESCRIPTION,PICTURE,PREP_TIME,COOK_TIME,CATEGORY,INSTRUCTIONS) VALUE (?,?,?,?,?,?,?,?)', \n                                        [recipe.userid, recipe.name, recipe.descr, recipe.picture, recipe.preptime, recipe.cooktime, recipe.category,recipe.instructions]);\n                                    con.end()\n                                },\n                                GetRecipeID: async function(recipe){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('SELECT ID FROM RECIPE WHERE USER_ID = ? AND NAME = ?',[recipe.userid,recipe.name]);\n                                    con.end()\n                                    return rows;\n                                },\n                                GetIngredient:async function(ingredient){\n                                    const con = await this.getConnection();\n                                    var rows = await con.execute('SELECT * FROM INGREDIENT WHERE NAME = ?',[ingredient])\n                                    con.end()\n                                    return rows;\n                                },\n                                AddIngredient: async function(ingredient){\n                                    const con = await this.getConnection();\n                                    con.execute('INSERT INTO INGREDIENT (NAME) VALUES (?)',[ingredient])\n                                    con.end()\n                                },\n                                GetIngredientID: async function(ingredient){\n                                    const con = await this.getConnection();\n                                    var rows = await con.execute('SELECT ID FROM INGREDIENT WHERE NAME = ?',[ingredient])\n                                    con.end()\n                                    return rows;\n                                },\n                                LinkIngredientToRecipe: async function(recipeID,IngredientID,Ingredient){\n                                    const con = await this.getConnection();\n                                    con.execute('INSERT INTO RECIPETOINGREDIENT (RECIPE_ID,INGREDIENT_ID,AMOUNT,UNIT) VALUES (?,?,?,?)',[recipeID,IngredientID,Ingredient.amount,Ingredient.unit])\n                                    con.end()\n                                },\n                                GetListOfIngredientsByRecipeID: async function(RecipeID){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('SELECT * FROM RECIPETOINGREDIENT a inner join INGREDIENT b on (a.INGREDIENT_ID = b.ID) WHERE a.RECIPE_ID = ?',[RecipeID]);\n                                    con.end()\n                                    return rows;\n                                },\n                                GetRecipeByID: async function(RecipeID){\n                                    const con = await this.getConnection();\n                                    row = await con.execute('SELECT * FROM RECIPE WHERE ID = ?',[RecipeID]);\n                                    con.end()\n                                    return row;\n                                },\n                                GetAllRecipes: async function(){\n                                    const con = await this.getConnection();\n                                    row = await con.execute('SELECT * FROM RECIPE ');\n                                    con.end()\n                                    return row;\n                                },\n                                GetTopTenRecipes: async function(){\n                                    const con = await this.getConnection();\n                                    row = await con.execute('SELECT * FROM RECIPE LIMIT 10');\n                                    con.end()\n                                    return row;\n                                },\n                                SearchRecipeByName: async function(RecipeName){\n                                    const con = await this.getConnection();\n                                    RecipeNameWithWildCards = \"%\"+RecipeName+\"%\"\n                                    row = await con.execute('SELECT * FROM RECIPE WHERE NAME LIKE ?',[RecipeNameWithWildCards]);\n                                    con.end()\n                                    return row;\n                                },\n                                GetIngredientToRecipeByForeignKeys: async function(RecipeID,IngredientID){\n                                    const con = await this.getConnection();\n                                    row = await con.execute('SELECT * FROM RECIPETOINGREDIENT WHERE RECIPE_ID = ? AND INGREDIENT_ID = ?',[RecipeID,IngredientID]);\n                                    con.end()\n                                    return row;\n                                },\n                                DeleteRecipeToIngredientByRecipeID: async function(RecipeID){\n                                    const con = await this.getConnection();\n                                    row = await con.execute('DELETE FROM RECIPETOINGREDIENT where RECIPE_ID = ?',[RecipeID]);\n                                    con.end()\n                                    return row;\n                                },\n                                DeleteRecipeByID: async function(RecipeID){\n                                    const con = await this.getConnection();\n                                    row = await con.execute('DELETE FROM RECIPE where ID = ?',[RecipeID]);\n                                    con.end()\n                                    return row;\n                                },\n                                UpdateRecipe: async function(recipe){\n                                    const con = await this.getConnection();\n                                    con.execute('UPDATE RECIPE SET NAME = ?, DESCRIPTION = ?,PICTURE = ?,PREP_TIME = ?,COOK_TIME = ?,CATEGORY=?,INSTRUCTIONS = ? WHERE ID = ?', \n                                        [ recipe.name, recipe.descr, recipe.picture, recipe.preptime, recipe.cooktime, recipe.category , recipe.instructions,recipe.id]);\n                                    con.end()\n                                },\n                                SearchRecipeByIngredient: async function(IngredientName){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('Select a.ID from RECIPE a inner join RECIPETOINGREDIENT b on (a.ID = b.RECIPE_ID) inner join INGREDIENT c on (b.INGREDIENT_ID = c.ID) where c.NAME = ?',[IngredientName]);\n                                    con.end()\n                                    return rows;\n                                },\n                                GetNumberOfIngredientsByRecipeId: async function(RecipeID){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('Select count(*) from RECIPETOINGREDIENT a  inner join INGREDIENT b on (a.INGREDIENT_ID = b.ID) where a.RECIPE_ID = ? GROUP BY a.RECIPE_ID',[RecipeID]);\n                                    con.end()\n                                    return rows;\n                                },\n                                SearchRecipeByCategory: async function(category){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('Select * from RECIPE where CATEGORY = ?',[category]);\n                                    con.end()\n                                    return rows;\n                                },\n                                SearchRecipeByEmail: async function(email){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('Select * from USER a inner join RECIPE b on (a.ID = b.USER_ID) where a.EMAIL = ?',[email]);\n                                    con.end()\n                                    return rows;\n                                },\n                                GetRecipeByUsernameAndRecipename: async function(recipename,userid){\n                                    const con = await this.getConnection();\n                                    rows = await con.execute('Select * from RECIPE where NAME = ? AND USER_ID = ?',[recipename,userid]);\n                                    con.end()\n                                    return rows;\n                                }\n                            }\n\n                            module.exports = ApiDatabaseService;\n                    "))}}]),t}(n.Component),j=function(e){Object(d.a)(t,e);var a=Object(m.a)(t);function t(){return Object(o.a)(this,t),a.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("h1",{class:"header"},"React"),r.a.createElement("div",{class:"page-text"},r.a.createElement("p",null,"A simple react search page, this react page uses redux.")),r.a.createElement("pre",{class:"code language-jsx"},'\n                        import React from "react";\n                        import PageTitle from "../shared/PageTitle";\n                        import RecipeCard from "../shared/RecipeCard";\n                        import "../../css/main.css";\n                        import recipeCategories from "../addRecipePage/recipeCategories"\n                        import { bindActionCreators } from "redux";\n                        import { connect } from "react-redux";\n                        import * as actionCreators from "../../store/actions/actions";\n                        const SearchByCategory = props => {\n                          var selectedItem = "";\n                          if (props.recipes.length > 0)\n                          {\n                            selectedItem = props.recipes[0].recipe.category;\n                          }\n                          return (\n                            <>\n                            \n                              <PageTitle title={"Search By Category"} />\n                              <div className="fitBody"> \n                              <div className="searchBarLayout">\n                              <div className="searchSpan">\n                              <select className="w3-select w3-border categorySearch" defaultValue={selectedItem} id="category" name="option" onChange={(event) =>\n                                  props.SearchForRecipeByCategory(event.target.value)\n                                }>\n                                <option value="" disabled>No Category Selected</option>\n                                {recipeCategories.map((category, key)=> (\n                                  <option key={key} value={category[0]}>{category[0]}</option>\n                                ))}\n                              </select>\n                              </div>\n                              </div>\n                              <div className="homeRecipePadding">\n                                  {props.recipes.map((recipe, index) => (\n                                    <RecipeCard recipe={recipe} key={index} />\n                                  ))}\n                                </div>\n                              </div>\n                            </>\n                          );\n                        };\n                        \n                        const mapStateToProps = state => {\n                          return {\n                            recipes: state.greenBeanAPI.recipes\n                          };\n                        };\n                        \n                        export default connect(\n                          mapStateToProps,\n                          dispatch => bindActionCreators(actionCreators, dispatch)\n                        )(SearchByCategory);\n                    '))}}]),t}(n.Component),U=(t(46),function(e){Object(d.a)(t,e);var a=Object(m.a)(t);function t(){return Object(o.a)(this,t),a.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return r.a.createElement("div",{className:"bar"},r.a.createElement(i.b,{className:"bar-item-main roboto-text-thin",to:"/"},"kylerdaybell.com"),r.a.createElement(i.b,{className:"bar-item roboto-text-thin",to:"/About"},"About"),r.a.createElement(i.b,{className:"bar-item roboto-text-thin",to:"/Projects"},"projects"),r.a.createElement(i.b,{className:"bar-item roboto-text-thin",to:"/Examples"},"examples"))}}]),t}(n.Component)),P=(t(47),function(e){Object(d.a)(t,e);var a=Object(m.a)(t);function t(){return Object(o.a)(this,t),a.apply(this,arguments)}return Object(p.a)(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{class:"header-text"},r.a.createElement("h1",null,"404 Error: This page does not exist"),r.a.createElement("a",{href:"/",class:"button"},"Take me home")),r.a.createElement("div",{class:"image-header"}))}}]),t}(n.Component));t(48);var q=function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(U,null),r.a.createElement("div",{className:"container"},r.a.createElement(l.c,null,r.a.createElement(l.a,{exact:!0,path:"/",component:u}),r.a.createElement(l.a,{path:"/About",component:E}),r.a.createElement(l.a,{path:"/Examples",component:w}),r.a.createElement(l.a,{path:"/Projects",component:T}),r.a.createElement(l.a,{path:"/Jest",component:O}),r.a.createElement(l.a,{path:"/Mysql",component:A}),r.a.createElement(l.a,{path:"/NodeController",component:k}),r.a.createElement(l.a,{path:"/NodeService",component:L}),r.a.createElement(l.a,{path:"/Express",component:M}),r.a.createElement(l.a,{path:"/NodeMysql",component:x}),r.a.createElement(l.a,{path:"/React",component:j}),r.a.createElement(l.a,{path:"/404",component:P}),r.a.createElement(l.a,{component:P}))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));s.a.render(r.a.createElement(i.a,null,r.a.createElement(q,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}],[[29,1,2]]]);
//# sourceMappingURL=main.3fafa0b7.chunk.js.map